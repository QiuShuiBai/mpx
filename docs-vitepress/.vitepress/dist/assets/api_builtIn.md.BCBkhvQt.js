import{_ as i,c as s,o as t,a7 as a}from"./chunks/framework.CwvFaCp2.js";const E=JSON.parse('{"title":"内建组件","description":"","frontmatter":{},"headers":[],"relativePath":"api/builtIn.md","filePath":"api/builtIn.md"}'),n={name:"api/builtIn.md"},e=a(`<h1 id="内建组件" tabindex="-1">内建组件 <a class="header-anchor" href="#内建组件" aria-label="Permalink to &quot;内建组件&quot;">​</a></h1><h2 id="component" tabindex="-1">component <a class="header-anchor" href="#component" aria-label="Permalink to &quot;component&quot;">​</a></h2><ul><li><p>is <code>string</code> : 动态渲染组件，通过改变<code>is</code>的值，来渲染不同的组件</p></li><li><p>range <code>string</code> : 使用 range 来指定可能渲染的组件，不传递时则为 全局注册 + usingComponents 中注册的所有组件，存在多个组件时使用逗号 <code>,</code> 分隔</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ComponentName 是在全局或者组件中完成注册的组件名称 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ComponentName}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 只会展示 compA 或者 compB 组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ComponentName}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compA,compB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>参考</strong>：<a href="./../guide/basic/component.html#动态组件">动态组件</a></p><h2 id="slot" tabindex="-1">slot <a class="header-anchor" href="#slot" aria-label="Permalink to &quot;slot&quot;">​</a></h2><ul><li>name <code>string</code> : 用于命名插槽</li></ul><p><code>&lt;slot&gt;</code> 元素作为组件模板中的内容分发插槽，<code>&lt;slot&gt;</code>元素自身将被替换。</p><p>详细用法，可参考下面的链接。</p><p><strong>参考</strong>：<a href="./../guide/basic/component.html#slot">slot</a></p>`,10),l=[e];function o(h,p,k,c,r,d){return t(),s("div",null,l)}const m=i(n,[["render",o]]);export{E as __pageData,m as default};
