import{_ as s,c as i,o as a,a7 as p}from"./chunks/framework.CwvFaCp2.js";const g=JSON.parse('{"title":"@mpxjs/cli 插件化改造","description":"","frontmatter":{},"headers":[],"relativePath":"articles/mpx-cli-next.md","filePath":"articles/mpx-cli-next.md"}'),l={name:"articles/mpx-cli-next.md"},n=p(`<h1 id="mpxjs-cli-插件化改造" tabindex="-1">@mpxjs/cli 插件化改造 <a class="header-anchor" href="#mpxjs-cli-插件化改造" aria-label="Permalink to &quot;@mpxjs/cli 插件化改造&quot;">​</a></h1><p><a href="https://github.com/mpx-ecology/mpx-cli" target="_blank" rel="noreferrer">@mxpjs/cli 地址</a></p><h2 id="背景-现状" tabindex="-1">背景 &amp; 现状 <a class="header-anchor" href="#背景-现状" aria-label="Permalink to &quot;背景 &amp; 现状&quot;">​</a></h2><p>Mpx 脚手架 <code>@mpxjs/cli</code> 作为 Mpx 生态当中比较重要的一部分，是使用 Mpx 进行小程序开发的入口。</p><p><code>@mpxjs/cli@2.x</code> 版本整体是基于模板配置的方式完成项目的初始化，整个的工作流是：</p><ol><li><p>下载一份存放于远端的 mpx 项目原始模板（mpx-template）</p></li><li><p>根据用户的 prompts 选项完成用户选项的注入，并初始化最终的项目文件</p></li></ol><p>完成项目的初始化后，除了一些基础配置文件外，整个项目的文件主要包含了如下的结构：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 项目源码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 项目配置文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置入口文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpxLoader.conf.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mpx-loader 配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpxPlugin.conf.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mpx webpack-plugin 配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.conf.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用户的 prompts 选择信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译构建配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建编译脚本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getPlugins.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack plugins </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getRules.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack module rules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getWebpackConf.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack 配置生成辅助函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工具函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.base.conf.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack 基础配置</span></span></code></pre></div><p>在初始化的项目当中，有关项目的所有配置文件，编译构建代码是全部暴露给开发者的，开发者可以对这些文件进行修改来满足自己实际的项目开发需要。同时还可以基于这一套原始的模板文件二次拓展为满足自己业务场景的模板。</p><p><strong>基于远程模板初始化项目的方式最大的一个好处就是将项目所有的底层配置完全暴露给开发者，开发者可以任意去修改对应的配置。</strong></p><h2 id="mpxjs-cli-2-x-自身的痛点" tabindex="-1"><code>mpxjs/cli@2.x</code> 自身的痛点 <a class="header-anchor" href="#mpxjs-cli-2-x-自身的痛点" aria-label="Permalink to &quot;\`mpxjs/cli@2.x\` 自身的痛点&quot;">​</a></h2><p>目前 <code>@mpxjs/cli@2.x</code> 采用这种基于模板的方式面临着两方面的痛点：</p><ol><li>对于 <code>@mpxjs/cli</code> 的使用者而言：</li></ol><ul><li><p>模板和业务项目割裂：远程模板没有严格的版本控制，用户无法感知到远程模板的更新变化；</p></li><li><p>项目升级困难：对于用户来说没有一个很好的方式完成升级工作，基本只能通过 copy 代码的方式，将 <code>mpx-template</code> 更新后的内容复制一份到自己的项目当中；或者是通过脚手架重新创建一个新的项目，将老的代码迁移到新项目当中；</p></li><li><p>项目结构臃肿：从项目结构角度来说没法做到按需，初始化代码臃肿。Mpx 支持了小程序跨平台、跨端、小程序插件等等相关的开发，不同的编译构建配置都需要全部生成，在运行时阶段才能决定是否启动对应的功能；</p></li><li><p>跨 Web 构建能力弱：在基于 Mpx 的跨 Web 场景构建中有关 <code>web</code> 侧的编译构建的配置是比较初级的，像 <code>MPA 多页应用</code> 等比较常用的功能是需要用户重新去手动搭建一套的；</p></li><li><p>可拓展性差，基于目前的模板拉取的方式无法满足多样化的业务需求场景迭代；</p></li></ul><ol start="2"><li>对于 <code>@mpxjs/cli</code> 的开发者而言：</li></ol><ul><li>分支场景多，功能模块耦合度高：脚手架的所有功能全部集合到一个大的模板当中。各部分的能力都是耦合在一起，为了满足不同项目的实际开发需要，代码里面需要写比较多的 <code>if...else...</code> 判断逻辑来决定要开启哪些功能，生成哪部分的模板；</li><li>长期可维护性差，开发心智负担重；</li></ul><p><strong>针对以上问题，通过调研业内一些优秀的脚手架工具，发现 <code>@vue/cli</code> 插件化的架构设计能很好的去解决我们以上所遇到的问题。核心思路是将 <code>@vue/cli</code> 作为 <code>@mpxjs/cli</code> 底层的引擎，收敛 Mpx 对于核心依赖管理、模板、构建配置的能力，充分利用 <code>@vue/cli</code> 提供的插件机制去构建、拓展上层的插件集。</strong></p><h3 id="有关-vue-cli" tabindex="-1">有关 <code>@vue/cli</code> <a class="header-anchor" href="#有关-vue-cli" aria-label="Permalink to &quot;有关 \`@vue/cli\`&quot;">​</a></h3><p>简单介绍下 <code>@vue/cli</code> 的插件化架构：</p><p><code>@vue/cli@3.x</code> 相较于 <code>2.x</code> 版本相比，整个 <code>@vue/cli</code> 的架构发生了非常大的变化，从基于模板的脚手架迭代为基于插件化的脚手架。简单的概述下整个插件化的构架就是：</p><p><img src="https://dpubstatic.udache.com/static/dpubimg/zfUXzzdOptIviAJ15AgSn_cli-3.png" alt="mpx-cli-3"></p><ul><li><p>@vue/cli 提供 vue cli 命令，负责偏好设置，生成模板、<code>vue-cli-plugin</code> 插件依赖管理的工作，例如 <code>vue create &lt;projectName&gt;</code>、<code>vue add &lt;pluginName&gt;</code>；</p></li><li><p>@vue/cli-service 作为 @vue/cli 整个插件系统当中的内部核心插件，提供了 npm script 注册服务，内置了部分 webpack 配置的同时，又提供了 <code>vue-cli-plugin</code> 插件的导入、加载以及 webpack 配置更新服务等。</p></li></ul><p>以上是 <code>@vue/cli</code> 生态当中最为核心的两部分内容，二者分工明确，各司其职。</p><p>此外在 <code>@vue/cli</code> 生态当中非常重要的一个点就是 <code>vue-cli-plugin</code> 插件，每个插件主要完成模板生成及生产编译构建配置。根据 <code>@vue/cli</code> 设计的规范，开发一个 <code>vue-cli-plugin</code> 需要遵照<strong>相关的约定</strong>来进行开发：</p><ul><li><p>@vue/cli <strong>约定</strong>插件如果要生成模板，那么需要提供 <code>generator</code> 入口文件；</p></li><li><p>@vue/cli-service <strong>约定</strong>插件的 <code>webpack</code> 配置更新需要放到插件的入口文件当中来完成，同时插件的命名也需要包含 <code>vue-cli-plugin</code> 前缀，因为 @vue/cli-service 是依据命名来加载相关的插件的；</p></li></ul><h2 id="插件化改造方案" tabindex="-1">插件化改造方案 <a class="header-anchor" href="#插件化改造方案" aria-label="Permalink to &quot;插件化改造方案&quot;">​</a></h2><p>一张图了解下插件化改造之后的 <code>@mpxjs/cli</code> 的架构设计：</p><p><img src="https://dpubstatic.udache.com/static/dpubimg/hNaL_GUMzUVLOsyY5quGE_cli-2.png" alt="mpx-cli-2"></p><h3 id="底层能力" tabindex="-1">底层能力 <a class="header-anchor" href="#底层能力" aria-label="Permalink to &quot;底层能力&quot;">​</a></h3><p>将 <code>@vue/cli</code>、<code>@vue/cli-service</code> 分别作为 <code>@mpx/cli</code>和 <code>@mpx/cli-service</code> 的底层能力，即利用插件化的架构设计，同时还非常灵活的满足了 Mpx 做差异化场景迭代的定制化改造。上层的插件满足 <code>vue-cli-plugin</code> 插件开发的规范，最终底层的能力还是依托于 <code>@vue/cli</code> 和 <code>@vue/cli-service</code> 进行工作。</p><h3 id="上层插件拆分" tabindex="-1">上层插件拆分 <a class="header-anchor" href="#上层插件拆分" aria-label="Permalink to &quot;上层插件拆分&quot;">​</a></h3><p>将原本大而全的模板进行插件化拆分，从 Mpx 所要解决的问题以及设计思路来考虑，站在跨平台的角度：</p><ol><li>web 开发</li></ol><ul><li>基于 <code>wx</code> 的跨 <code>web</code> 开发；</li></ul><ol start="2"><li>小程序开发</li></ol><ul><li>基于 <code>wx</code> 的跨平台(<code>ali</code>、<code>swan</code>，<code>tt</code>，<code>dd</code>)的小程序开发；</li><li>使用云函数的微信小程序开发；</li><li>微信小程序的插件模式的开发；</li></ul><p>一个项目可能只需要某一种开发模式，例如仅仅是微信小程序的插件模式开发，也有可能是小程序和web平台混合开发等等，不同的开发模式对应了：</p><ol><li><p><strong>不同的目录结构</strong>；</p></li><li><p><strong>不同的编译构建配置</strong></p></li></ol><hr><p>基于这样一种现状以及 <code>@mpxjs/cli</code> 所要解决的问题，从跨平台的角度出发将功能进行了拆分，最终拆解为如下的9个插件：</p><ul><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx" target="_blank" rel="noreferrer">vue-cli-plugin-mpx</a>（mpx 基础开发插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-mp" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-mp</a>（mpx 小程序平台开发插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-web" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-web</a>（mpx 跨 web 平台开发插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-cloud-func" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-cloud-func</a>（微信小程序云函数开发插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-plugin-mode" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-plugin-mode</a>（微信小程序插件模式开发插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-eslint" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-eslint</a>（mpx eslint 插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-unit-test" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-unit-test</a>（小程序单元测试插件）</p></li><li><p><a href="https://github.com/mpx-ecology/mpx-cli/tree/master/packages/vue-cli-plugin-mpx-typescript" target="_blank" rel="noreferrer">vue-cli-plugin-mpx-typescript</a>（mpx typescript 插件）</p></li></ul><p>这些拆解出来的插件都将和功能相关的<strong>项目模板</strong>以及<strong>编译构建</strong>配置进行了收敛。</p><p>项目模板的生成不用说，借助 <code>@vue/cli</code> 的 <code>Generator API</code> 按需去生成项目开发所需要的模板，例如项目需要使用 <code>eslint</code> 的功能，那么在生成项目的时候会生成对应 <code>vue-cli-plugin-mpx-eslint</code> 所提供的模板文件，如果不需要使用，项目当中最终也不会出现和 <code>eslint</code> 相关的文件配置。</p><p>重点说下编译构建的配置是如何进行拆解的：</p><p><strong>在 <code>@vue/cli@3.x</code> 基于插件的架构设计当中，决定是否要使用某个插件的依据就是判断这个插件是否被你的项目所安装</strong>和基于模板的构架相比最大的区别就是：基于模板的架构在最终生成的模板配置里需要保存一些环境配置文件，以供编译构建的运行时来判断是否启用某些功能。但是基于插件的架构基本上是不再需要这些环境配置文件的，因为你如果要使用一个插件的功能，只需要安装它即可。</p><p>因此依照这样的设计规范，我们将：</p><ul><li><p><code>eslint</code></p></li><li><p><code>unit-test</code></p></li><li><p><code>typescript</code></p></li></ul><p>这些非常独立的功能都单独抽离成了可拔插的插件，安装即启用。</p><p>以上功能有个特点就是和平台是完全解耦的，所以在拆解的过程中可以拆的比较彻底。但是由于 <code>mpx</code> 项目的特殊性，即要支持基于 <code>wx</code> 小程序的跨端以及 <code>web</code> 开发，同时还要支持小程序的云函数、小程序插件模式的开发，且不同开发模式的编译构建配置都有些差异。可以用如下的集合图来表示他们之间的关系：</p><p><img src="https://dpubstatic.udache.com/static/dpubimg/3bgI4GSZ09ai4G1C3TDtr_cli-4.png" alt="mpx-cli-4"></p><p>不同插件进行组合使用来满足不同场景下的使用。</p><p>在不同平台开发模式下是有 <code>mpx</code> 编译构建的基础配置的，这个是和平台没有太多关系，因此将这部分的配置单独抽离为一个插件：<code>vue-cli-plugin-mpx</code>，<strong>同时这个插件也被置为了 <code>@mpxjs/cli</code> 的 <code>preset</code> 预设插件，不管任何项目开发模式下，这个插件都会被默认的安装</strong>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue-cli-plugin-mpx</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">webpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resourceQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">asScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;javascript/auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wxs-pre-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(wxs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">qs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">sjs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">filter</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mpx-wxs-pre-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MpxWebpackPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wxsPreLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().loader)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transpileDepRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genTranspileDepRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.transpileDependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .include</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filepath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transpileDepRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transpileDepRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filepath))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filepath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">mpx</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filepath)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理 mpx 转 web 的情况，vue-loader 会将 script block fake 出一个 .mpx.js 路径，用以 loader 的匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/@mpxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transpileDepRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genTranspileDepRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.transpileDependencies)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .include</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filepath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transpileDepRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transpileDepRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filepath))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/@mpxjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.resolve.extensions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.mpx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.wxml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  webpackConfig.resolve.modules.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在小程序的开发模式下，<code>vue-cli-plugin-mpx-mp</code> 会在 <code>vue-cli-plugin-mpx</code> 的基础上去拓展 <code>webpack</code> 配置以满足小程序的编译构建。</p><p>在跨 web 的开发模式下，<code>vue-cli-plugin-mpx-web</code> 会在 <code>vue-cli-plugin-mpx</code> 和 <code>@vue/cli</code> 的基础上去拓展配置以满足 web 侧的开发编译构建。</p><h3 id="web-平台编译构建能力增强" tabindex="-1">Web 平台编译构建能力增强 <a class="header-anchor" href="#web-平台编译构建能力增强" aria-label="Permalink to &quot;Web 平台编译构建能力增强&quot;">​</a></h3><p>在 <code>@mpxjs/cli@2.x</code> 版本当中有关 <code>web</code> 侧的编译构建的配置是比较初级的，像 <code>热更新</code>、<code>MPA 多页应用</code> 等比较常用的功能是需要用户重新去手动搭建一套的。而 <code>@vue/cli@3.x</code> 即为 <code>vue</code> 项目而生，提供了非常完备的 <code>web</code> 应用的编译构建打包配置。</p><p><strong>所以 <code>@mpxjs/cli@next</code> 版本里面做了一项非常重要的工作就是复用 <code>@vue/cli</code> 的能力，弥补 <code>mpx</code> 项目在跨 <code>web</code> 项目编译构建的不足。</strong></p><p>因此关于 <code>mpx</code> 跨 <code>web</code> 编译构建的部分也单独抽离为一个插件：<code>vue-cli-plugin-mpx-web</code>，这个插件所做的工作就是在 <code>@vue/cli</code> 提供的 <code>web</code> 编译构建的能力上去适配 <code>mpx</code> 项目。这样也就完成了 <code>mpx</code> 跨 <code>web</code> 项目编译构建能力的增强。</p><p><strong>这也意味着 <code>@vue/cli</code> 所提供的能力基本上在 mpx 跨 web 项目当中都可使用。</strong></p><h3 id="项目配置拓展能力" tabindex="-1">项目配置拓展能力 <a class="header-anchor" href="#项目配置拓展能力" aria-label="Permalink to &quot;项目配置拓展能力&quot;">​</a></h3><p>在 <code>@mpxjs/cli@2.x</code> 版本的项目如果要进行配置拓展，基本需要进行以下2个步骤：</p><ol><li><p>对 <code>config</code> 文件夹下的相关的配置文件进行修改；</p></li><li><p>对 <code>build</code> 文件夹下的编译构建配置文件进行修改；</p></li></ol><p>这也是在文章一开始的时候就提到的基于模板的大而全的文件组织方式。</p><p>而在 <code>@mpxjs/cli@next</code> 版本当中，将项目的配置拓展全部收敛至 <code>vue.config.js</code> 文件当中去完成，同时减少了开发者需要了解项目结构的心智负担。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pluginOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mpx: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugin: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // mpx-plugin 相关的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      loader: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // mpx-loader 相关的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  chainWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自定义的 webpack 配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="改造后的目录结构" tabindex="-1">改造后的目录结构 <a class="header-anchor" href="#改造后的目录结构" aria-label="Permalink to &quot;改造后的目录结构&quot;">​</a></h3><p>在第一章节展示了目前 <code>@mpxjs/cli@2.x</code> 初始化项目的结构和现状。经过这次的插件化的改造后，项目的结构变得更为简洁，开发者只需要关注 <code>src</code> 源码目录以及 <code>vue.config.js</code> 配置文件即可：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue.config.js</span></span></code></pre></div><h2 id="没有银弹" tabindex="-1">没有银弹 <a class="header-anchor" href="#没有银弹" aria-label="Permalink to &quot;没有银弹&quot;">​</a></h2><p>虽然基于 <code>@vue/cli</code> 插件的架构模式完成了 <code>@mpxjs/cli@3.x</code> 的插件化改造升级。但是由于 <code>mpx</code> 项目开发的一些特殊性，不同插件之间的协同工作是有一些约定的。</p><p>例如 <code>@vue/cli-service</code> 内置了一些 <code>webpack</code> 的配置，因为 <code>@vue/cli</code> 是专门针对 <code>web</code>应用的，这些配置会在所有的编译构建流程当中生效，不过这些配置当中有些对于小程序的开发来说是不需要的。</p><p>那么针对这种情况，为了避免不同模式下的 <code>webpack</code> 配置相互污染。<code>web</code> 侧的编译构建还是基于 <code>@vue/cli</code> 提供的能力去适配 <code>mpx</code> 的 <code>web</code> 开发。而小程序侧的编译构建配置是通过 <code>@vue/cli-service</code> 内部暴露出来的一些方法去跳过一些对于小程序开发来说不需要的 <code>webpack</code> 配置来最终满足小程序的构建配置。</p><p>因此在各插件的开发当中，需要暴露该插件所应用的平台：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.export.platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mp&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可选值： &#39;web&#39;</span></span></code></pre></div><p>这样在实际的构建过程当中通过平台的标识来决定对应哪些插件会生效。</p><h2 id="如何开发一个基于-mpx-的业务脚手架插件" tabindex="-1">如何开发一个基于 mpx 的业务脚手架插件 <a class="header-anchor" href="#如何开发一个基于-mpx-的业务脚手架插件" aria-label="Permalink to &quot;如何开发一个基于 mpx 的业务脚手架插件&quot;">​</a></h2><p>具体参阅<a href="https://github.com/mpx-ecology/mpx-cli/blob/master/PLUGIN_GUIDE.md" target="_blank" rel="noreferrer">文档</a></p>`,78),e=[n];function h(k,t,d,E,r,c){return a(),i("div",null,e)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
