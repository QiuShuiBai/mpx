import{_ as s,c as i,o as t,a7 as a}from"./chunks/framework.CwvFaCp2.js";const y=JSON.parse('{"title":"跨平台","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advance/platform.md","filePath":"guide/advance/platform.md"}'),l={name:"guide/advance/platform.md"},n=a(`<h1 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h1><h2 id="多平台支持" tabindex="-1">多平台支持 <a class="header-anchor" href="#多平台支持" aria-label="Permalink to &quot;多平台支持&quot;">​</a></h2><p>Mpx支持在多个小程序平台中进行增强，目前支持的小程序平台包括微信，支付宝，百度，qq和头条，不过自2.0版本后，Mpx支持了以微信增强语法为base的跨平台输出，实现了一套业务源码在多端输出运行的能力，大大提升了多小程序平台业务的开发效率，详情可以查看<a href="#跨平台编译">跨平台编译</a></p><h3 id="template增强特性" tabindex="-1">template增强特性 <a class="header-anchor" href="#template增强特性" aria-label="Permalink to &quot;template增强特性&quot;">​</a></h3><p>不同平台上的模板增强指令按照平台的指令风格进行设计，文档和代码示例为了方便统一采用微信小程序下的书写方式。</p><p>模板增强指令对应表：</p><table tabindex="0"><thead><tr><th>增强指令</th><th>微信</th><th>支付宝</th><th>百度</th><th>qq</th><th>头条</th></tr></thead><tbody><tr><td>双向绑定</td><td>wx:model</td><td>a:model</td><td>s-model</td><td>qq:model</td><td>tt:model</td></tr><tr><td>双向绑定辅助属性</td><td>wx:model-prop</td><td>a:model-prop</td><td>s-model-prop</td><td>qq:model-prop</td><td>tt:model-prop</td></tr><tr><td>双向绑定辅助属性</td><td>wx:model-event</td><td>a:model-event</td><td>s-model-event</td><td>qq:model-event</td><td>tt:model-event</td></tr><tr><td>双向绑定辅助属性</td><td>wx:model-value-path</td><td>a:model-value-path</td><td>s-model-value-path</td><td>qq:model-value-path</td><td>tt:model-value-path</td></tr><tr><td>双向绑定辅助属性</td><td>wx:model-filter</td><td>a:model-filter</td><td>s-model-filter</td><td>qq:model-filter</td><td>tt:model-filter</td></tr><tr><td>动态样式绑定</td><td>wx:class</td><td>a:class</td><td>s-class</td><td>qq:class</td><td>暂不支持</td></tr><tr><td>动态样式绑定</td><td>wx:style</td><td>a:style</td><td>s-style</td><td>qq:style</td><td>暂不支持</td></tr><tr><td>获取节点/组件实例</td><td>wx:ref</td><td>a:ref</td><td>s-ref</td><td>qq:ref</td><td>tt:ref</td></tr><tr><td>显示/隐藏</td><td>wx:show</td><td>a:show</td><td>s-show</td><td>qq:show</td><td>tt:show</td></tr></tbody></table><h3 id="script增强特性" tabindex="-1">script增强特性 <a class="header-anchor" href="#script增强特性" aria-label="Permalink to &quot;script增强特性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>增强字段</th><th>微信</th><th>支付宝</th><th>百度</th><th>qq</th><th>头条</th></tr></thead><tbody><tr><td>computed</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>部分支持，无法作为props传递(待头条修复生命周期执行顺序可完整支持)</td></tr><tr><td>watch</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>mixins</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="style增强特性" tabindex="-1">style增强特性 <a class="header-anchor" href="#style增强特性" aria-label="Permalink to &quot;style增强特性&quot;">​</a></h3><p>无平台差异</p><h3 id="json增强特性" tabindex="-1">json增强特性 <a class="header-anchor" href="#json增强特性" aria-label="Permalink to &quot;json增强特性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>增强字段</th><th>微信</th><th>支付宝</th><th>百度</th><th>qq</th><th>头条</th></tr></thead><tbody><tr><td>packages</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>部分支持，无法分包</td></tr></tbody></table><h2 id="跨平台输出小程序" tabindex="-1">跨平台输出小程序 <a class="header-anchor" href="#跨平台输出小程序" aria-label="Permalink to &quot;跨平台输出小程序&quot;">​</a></h2><p>自2.0版本开始，mpx开始支持跨小程序平台编译，不同于常规跨平台框架重新定义一套DSL的方式，mpx支持基于现有平台的源码编译为其他已支持平台的目标代码。跨平台编译能力依赖于mpx的多平台支持，目前mpx已经支持将微信小程序跨平台编译为支付宝、百度、qq和头条小程序。</p><h3 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><p>如果你是使用<code>mpx init xxx</code>新生成的项目，package.json里script部分有<code>npm run build:cross</code>，直接执行<code>npm run build:cross</code>（watch同理），如果仅需构建某几个平台的，可以修改该script，按已有的格式删除或增添某些某些平台</p><p>如果你是自行搭建的mpx项目，你只需要进行简单的配置修改，打开项目的webpack配置，找到@mpxjs/webpack-plugin的声明位置，传入mode和srcMode参数即可，示例如下</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MpxwebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // mode为mpx编译的目标平台，可选值有(wx|ali|swan|qq|tt|jd|web|ios|android)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ali&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // srcMode为mpx编译的源码平台，目前仅支持wx   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  srcMode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>使用 @mpxjs/cli 创建的项目，可以通过在 <code>npm script</code> 当中定义 <code>targets</code> 来设置编译的目标平台</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 项目 package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build:cross&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mpx-cli-service build:mp --targets=wx,ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="跨平台差异抹平" tabindex="-1">跨平台差异抹平 <a class="header-anchor" href="#跨平台差异抹平" aria-label="Permalink to &quot;跨平台差异抹平&quot;">​</a></h3><p>为了实现小程序的跨平台编译，我们在编译和运行时做了很多工作以抹平小程序开发中各个方面的跨平台差异</p><h4 id="模板语法差异抹平" tabindex="-1">模板语法差异抹平 <a class="header-anchor" href="#模板语法差异抹平" aria-label="Permalink to &quot;模板语法差异抹平&quot;">​</a></h4><p>对于通用指令/事件处理的差异，mpx提供了统一的编译转换抹平操作；而对于平台组件和组件属性的差异，我们也在力所能及的范围内进行了转换抹平，对于平台差异性过大无法转换的部分会在编译阶段报错指出。</p><h4 id="组件-页面对象差异抹平" tabindex="-1">组件/页面对象差异抹平 <a class="header-anchor" href="#组件-页面对象差异抹平" aria-label="Permalink to &quot;组件/页面对象差异抹平&quot;">​</a></h4><p>不同平台间组件/页面对象的差异主要体现在生命周期上，我们在支持多平台能力时已经将不同平台的生命周期映射到mpx框架的一套内部生命周期中，基于这个统一的映射，不同平台的生命周期差异也得到了抹平。</p><p>此外，我们还进行了一系列运行时增强来模拟微信平台中提供而其他平台中未提供的能力，例如：</p><ul><li>在支付宝组件实例中提供了this.triggerEvent方法模拟微信中的自定义组件事件；</li><li>提供了this.selectComponent/this.selectAllComponents方法模拟微信中获取子组件实例的能力；</li><li>重写了createSelectorQuery方法抹平了微信/支付宝平台间的使用差异；</li><li>转换抹平了微信/支付宝中properties定义的差异；</li><li>利用mpx本身的数据响应能力模拟了微信中的observers/property observer能力等;</li><li>提供了this.getRelationNodes方法并支持了微信中组件间关系relations的能力</li></ul><p>对于原生小程序组件的转换，还会进行一些额外的抹平，已兼容一些已有的原生组件库，例如：</p><ul><li>将支付宝组件中的props数据挂载到this.data中以模拟微信平台中的表现；</li><li>利用mpx本身的mixins能力模拟微信中的behaviors能力。</li></ul><p>对于一些无法进行模拟的跨平台差异，会在运行时进行检测并报错指出，例如微信转支付宝时使用moved生命周期等。</p><h4 id="json配置差异抹平" tabindex="-1">json配置差异抹平 <a class="header-anchor" href="#json配置差异抹平" aria-label="Permalink to &quot;json配置差异抹平&quot;">​</a></h4><p>类似于模板语法，会在编译阶段进行转换抹平，无法转换的部分会在编译阶段报错指出。</p><h4 id="api调用差异抹平" tabindex="-1">api调用差异抹平 <a class="header-anchor" href="#api调用差异抹平" aria-label="Permalink to &quot;api调用差异抹平&quot;">​</a></h4><p>对于api调用，mpx提供了一个api调用代理插件来抹平跨平台api调用的差异，使用时需要在项目中安装使用<code>@mpxjs/api-proxy</code>，可以通过两种方式使用</p><h4 id="方式一-在调用小程序api时统一使用mpx对象进行调用-示例如下" tabindex="-1">方式一：在调用小程序api时统一使用mpx对象进行调用，示例如下： <a class="header-anchor" href="#方式一-在调用小程序api时统一使用mpx对象进行调用-示例如下" aria-label="Permalink to &quot;方式一：在调用小程序api时统一使用mpx对象进行调用，示例如下：&quot;">​</a></h4><p>安装插件支持options传入，options说明如下：</p><table tabindex="0"><thead><tr><th>参数名称</th><th>类型</th><th>含义</th><th>是否必填</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><s>platform</s></td><td><s>Object</s></td><td><s>各平台之间的转换</s></td><td><s>否</s></td><td><s>{ from:&#39;&#39;, to:&#39;&#39; }</s></td><td>已删除</td></tr><tr><td>usePromise</td><td>Boolean</td><td>是否将 api 转化为 promise 格式使用</td><td>-</td><td>-</td><td>-</td></tr><tr><td><s>exclude</s></td><td><s>Array(String)</s></td><td><s>跨平台时不需要转换的 api</s></td><td>-</td><td>-</td><td>已删除</td></tr><tr><td>whiteList</td><td>Array(String)</td><td>强行转化为 promise 格式的 api</td><td>否</td><td>[]</td><td>需要 usePromise 设为 true</td></tr><tr><td>blackList</td><td>Array(String)</td><td>不转换 promise 格式的 api</td><td>否</td><td>[]</td><td>需要 usePromise 设为 true</td></tr><tr><td>custom</td><td>Object</td><td>提供用户在各渠道下自定义api开放能力</td><td>否</td><td>[]</td><td>-</td></tr></tbody></table><h4 id="普通形式" tabindex="-1">普通形式 <a class="header-anchor" href="#普通形式" aria-label="Permalink to &quot;普通形式&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiProxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/api-proxy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiProxy)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showModal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;标题&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这是一个弹窗&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.cancel) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户点击取消&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="使用promise形式" tabindex="-1">使用promise形式 <a class="header-anchor" href="#使用promise形式" aria-label="Permalink to &quot;使用promise形式&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiProxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/api-proxy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiProxy, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  usePromise: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showActionSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  itemList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.tapIndex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="用户自定义" tabindex="-1">用户自定义 <a class="header-anchor" href="#用户自定义" aria-label="Permalink to &quot;用户自定义&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiProxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/api-proxy&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { scanCode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@test/scanCode&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiProxy, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  custom: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    web: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scanCode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在web下调用的实际是用户自定义部分的scanCode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onlyFromCamera: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scanCode, success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scanCode, fail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="方式二-直接在-mpxjs-api-proxy导出想使用的方法" tabindex="-1">方式二：直接在<code>@mpxjs/api-proxy</code>导出想使用的方法 <a class="header-anchor" href="#方式二-直接在-mpxjs-api-proxy导出想使用的方法" aria-label="Permalink to &quot;方式二：直接在\`@mpxjs/api-proxy\`导出想使用的方法&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 独立使用 支持treesharking能力</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showModal } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/api-proxy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showModal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;标题&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这是一个弹窗&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;弹框展示成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>对于无法转换抹平的api调用会在运行时阶段报错指出。</p><h4 id="webview-bridge差异抹平" tabindex="-1">webview bridge差异抹平 <a class="header-anchor" href="#webview-bridge差异抹平" aria-label="Permalink to &quot;webview bridge差异抹平&quot;">​</a></h4><p>Mpx支持小程序跨平台后，多个平台的小程序里都有webview组件，webview打开的页面和小程序可以通过API来通信以及调用一些小程序能力，但是各方webview提供的API是不一样的。</p><p>比如微信是用 wx.miniProgram.navigateTo 来跳转到别的小程序页面，而支付宝里是 my.navigateTo ，那么我们开发H5时候为了让H5能适应各家小程序平台就需要写多份对应逻辑。</p><p>为解决这个问题，Mpx提供了用于运行在小程序的webview里的H5抹平平台差异的bridge库：@mpxjs/webview-bridge</p><p>使用方式很简单，不过注意这个库是给H5用的，不是给小程序用的。在H5项目中引入。</p><p><a href="https://github.com/didi/mpx/tree/master/examples/mpx-webview" target="_blank" rel="noreferrer">使用示例</a></p><p>支持script标签引入和npm引入，标签引入的话，全局实例是mpx（npm模块使用下也鼓励import mpx from &#39;@mpxjs/webview-birdge&#39;），使用就例如 mpx.navigateTo ，能保持整个项目风格完全一致。</p><p>提供的API如下：<code>navigateTo, navigateBack, switchTab, reLaunch, redirectTo, getEnv, postMessage, getLoadError</code></p><h2 id="跨平台条件编译" tabindex="-1">跨平台条件编译 <a class="header-anchor" href="#跨平台条件编译" aria-label="Permalink to &quot;跨平台条件编译&quot;">​</a></h2><p>Mpx跨平台编译的原则在于，<code>能转则转，转不了则报错提示</code>，对于无法抹平差异的部分，我们提供了完善的跨平台条件编译机制便于用户处理因平台差异而无法相互转换的部分，也能够用于实现具有平台差异性的业务逻辑。</p><p>mpx中我们支持了三种维度的条件编译，分别是文件维度，区块维度和代码维度，其中，文件维度和区块维度主要用于处理一些大块的平台差异性逻辑，而代码维度主要用于处理一些局部简单的平台差异。</p><h3 id="文件维度条件编译" tabindex="-1">文件维度条件编译 <a class="header-anchor" href="#文件维度条件编译" aria-label="Permalink to &quot;文件维度条件编译&quot;">​</a></h3><p>文件维度条件编译简单的来说就是文件为维度进行跨平台差异代码的编写，例如在微信-&gt;支付宝的项目中存在一个业务地图组件map.mpx，由于微信和支付宝中的原生地图组件标准差异非常大，无法通过框架转译方式直接进行跨平台输出，这时你可以在相同的位置新建一个map.ali.mpx，在其中使用支付宝的技术标准进行开发，编译系统会根据当前编译的mode来加载对应模块，当mode为ali时，会优先加载map.ali.mpx，反之则会加载map.mpx。</p><p>文件维度条件编译能够与webpack alias结合使用，对于npm包的文件我们并不方便在原本的文件位置创建.ali的条件编译文件，但我们可以通过webpack alias在相同位置创建一个<code>虚拟的</code>.ali文件，并将其指向项目中的其他文件位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 对于npm包中的文件依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npmModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;somePackage/lib/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 配置以下alias后，当mode为ali时，会优先加载项目目录中定义的projectRoot/somePackage/lib/index文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          alias: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;somePackage/lib/index.ali&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;projectRoot/somePackage/lib/index&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><h3 id="区块维度条件编译" tabindex="-1">区块维度条件编译 <a class="header-anchor" href="#区块维度条件编译" aria-label="Permalink to &quot;区块维度条件编译&quot;">​</a></h3><p>在.mpx单文件中一般存在template、js、stlye、json四个区块，mpx的编译系统支持以区块为维度进行条件编译，只需在区块标签中添加<code>mode</code>属性定义该区块的目标平台即可，示例如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--编译mode为ali时使用如下区块--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ali&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--该区块中的所有代码需采用支付宝的技术标准进行编写--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;支付宝环境&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--其他编译mode时使用如下区块--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;其他环境&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="代码维度条件编译" tabindex="-1">代码维度条件编译 <a class="header-anchor" href="#代码维度条件编译" aria-label="Permalink to &quot;代码维度条件编译&quot;">​</a></h3><p>如果只有局部的代码存在跨平台差异，mpx同样支持在代码内使用if/else进行局部条件编译，用户可以在js代码和template插值中访问<code>__mpx_mode__</code>获取当前编译mode，进行平台差异逻辑编写，js代码中使用示例如下。</p><p>除了 <code>__mpx_mode__</code> 这个默认插值以外，有别的环境变量需要的话可以在mpx.plugin.conf.js里通过defs进行配置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__mpx_mode__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ali&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行支付宝环境相关逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行其他环境相关逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>template代码中使用示例如下</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--此处的__mpx_mode__不需要在组件中声明数据，编译时会基于当前编译mode进行替换--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{__mpx_mode__ === &#39;ali&#39;}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;支付宝环境&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;其他环境&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>JSON中的条件编译（注意，这个依赖JSON的动态方案，得通过name=&quot;json&quot;这种方式来编写，其实写的是js代码，最终module.exports导出一个可json化的对象即可）：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __mpx_mode__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wx&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;main/xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;sub/xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;test/xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以为不同环境动态书写配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  usingComponents: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aComponents: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../xxxxx&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可以打注释 xxx组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>样式的条件编译：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  @mpx-if (__mpx_env__ === &#39;someEvn&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-if (__mpx_mode__ === &#39;wx&#39;) */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .backColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    @mpx-elif (__mpx_mode__ === &#39;qq&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .backColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-endif */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-if (__mpx_mode__ === &#39;swan&#39;) */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .backColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cyan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-endif */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .textSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  @mpx-else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.backColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-if (__mpx_mode__ === &#39;swan&#39;) */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-else */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* @mpx-endif */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  @mpx-endif</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h3 id="属性维度条件编译" tabindex="-1">属性维度条件编译 <a class="header-anchor" href="#属性维度条件编译" aria-label="Permalink to &quot;属性维度条件编译&quot;">​</a></h3><p>属性维度条件编译允许用户在组件上使用 <code>@</code> 和 <code>|</code> 符号来指定某个节点或属性只在某些平台下有效。</p><p>对于同一个 button 组件，微信小程序支持 <code>open-type=&quot;getUserInfo&quot;</code>，但是支付宝小程序支持 <code>open-type=&quot;getAuthorize&quot; </code>。如果不使用任何维度的条件编译，则在编译的时候会有警告和报错信息。</p><p>比如业务中需要通过 button 按钮获取用户信息，虽然可以使用代码维度条件编译来解决，但是增加了很多代码量：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{__mpx_mode__ === &#39;wx&#39; || __mpx_mode__ === &#39;swan&#39;}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bindgetuserinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  wx:elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{__mpx_mode__ === &#39;ali&#39;}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getAuthorize&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onTap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>而用属性维度的编译则方便很多：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  open-type@wx|swan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bindgetuserinfo@wx|swan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  open-type@ali</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getAuthorize&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scope@ali</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onTap@ali</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onTap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>属性维度的编译也可以对整个节点进行条件编译，例如只想在支付宝小程序中输出某个节点：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @ali</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;this is view&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>需要注意使用上述用法时，节点自身在构建时框架不会对节点属性进行平台语法转换，但对于其子节点，框架并不会继承父级节点 mode，会进行正常跨平台语法转换。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--错误示例--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @ali</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otherClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;tap click&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// srcMode 为 wx 跨端输出 ali 结果为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @ali</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otherClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;tap click&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>上述示例为错误写法，假如srcMode为微信小程序，用上述写法构建输出支付宝小程序时，父节点 bindtap 不会被转为 onTap，在支付宝平台执行时事件会无响应。</p><p>正确写法如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--正确示例--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @ali</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otherClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;tap click&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 输出 ali 产物</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @ali</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otherClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;tap click&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>有时开发者期望使用 @ali 这种方式仅控制节点的展示，保留节点属性的平台转换能力，为此 Mpx 实现了一个隐式属性条件编译能力</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--srcMode为 wx，输出 ali 时，bindtap 会被正常转换为 onTap--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @_ali</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;test&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在对应的平台前加一个_，例如@_ali、@_swan、@_tt等，使用该隐式规则仅有条件编译能力，节点属性语法转换能力依旧。</p><p>有时候我们不仅需要对节点属性进行条件编译，可能还需要对节点标签进行条件编译。</p><p>为此，我们支持了一个特殊属性 <code>mpxTagName</code>，如果节点存在这个属性，我们会在最终输出时将节点标签修改为该属性的值，配合属性维度条件编译，即可实现对节点标签进行条件编译，例如在百度环境下希望将某个 view 标签替换为 cover-view，我们可以这样写：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mpxTagName@swan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cover-view&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;will be cover-view in swan&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="use-env" tabindex="-1">通过 env 实现自定义目标环境的条件编译 <a class="header-anchor" href="#use-env" aria-label="Permalink to &quot;通过 env 实现自定义目标环境的条件编译 {#use-env}&quot;">​</a></h3><p>Mpx 支持在以上四种条件编译的基础上，通过自定义 env 的形式实现在不同环境下编译产出不同的代码。</p><p>实例化 MpxWebpackPlugin 的时候，传入配置 env。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pluginOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mpx: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      srcMode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wx&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // srcMode为mpx编译的源码平台，目前仅支持wx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugin: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        env: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;didi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // env为mpx编译的目标环境，需自定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="文件维度条件编译-1" tabindex="-1">文件维度条件编译 <a class="header-anchor" href="#文件维度条件编译-1" aria-label="Permalink to &quot;文件维度条件编译&quot;">​</a></h4><p>微信转支付宝的项目中存在一个业务地图组件map.mpx，由于微信和支付宝中的原生地图组件标准差异非常大，无法通过框架转译方式直接进行跨平台输出，而且这个地图组件在不同的目标环境中也有很大的差异，这时你可以在相同的位置新建一个 map.ali.didi.mpx 或 map.ali.qingju.mpx，在其中使用支付宝的技术标准进行开发，编译系统会根据当前编译的 mode 和 env 来加载对应模块，当 mode 为 ali，env 为 didi 时，会优先加载 map.ali.didi.mpx、map.ali.mpx，如果没有定义 env，则会优先加载 map.ali.mpx，反之则会加载 map.mpx。</p><h4 id="区块维度条件编译-1" tabindex="-1">区块维度条件编译 <a class="header-anchor" href="#区块维度条件编译-1" aria-label="Permalink to &quot;区块维度条件编译&quot;">​</a></h4><p>在.mpx单文件中一般存在template、js、stlye、json四个区块，mpx的编译系统支持以区块为维度进行条件编译，只需在区块标签中添加<code>mode</code>或<code>env</code>属性定义该区块的目标平台即可，示例如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--编译mode为ali且env为didi时使用如下区块，优先级最高是4--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ali&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;didi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;该区块中的所有代码需采用支付宝的技术标准进行编写&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--编译mode为ali时使用如下区块，优先级是3--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ali&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;该区块中的所有代码需采用支付宝的技术标准进行编写&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--编译env为didi时使用如下区块，优先级是2--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;didi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;该区块中的所有代码需采用支付宝的技术标准进行编写&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--其他环境，优先级是1--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;该区块中的所有代码需采用支付宝的技术标准进行编写&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意，如果多个相同的区块写相同的 mode 和 env，默认会用最后一个，如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ali&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;该区块会被忽略&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ali&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;默认会用这个区块&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="代码维度条件编译-1" tabindex="-1">代码维度条件编译 <a class="header-anchor" href="#代码维度条件编译-1" aria-label="Permalink to &quot;代码维度条件编译&quot;">​</a></h4><p>如果在 MpxWebpackPlugin 插件初始化时自定义了 env，你可以访问<code>__mpx_env__</code>获取当前编译env，进行环境差异逻辑编写。使用方法与<code>__mpx_mode__</code>相同。</p><h4 id="属性维度条件编译-1" tabindex="-1">属性维度条件编译 <a class="header-anchor" href="#属性维度条件编译-1" aria-label="Permalink to &quot;属性维度条件编译&quot;">​</a></h4><p>env 属性维度条件编译与 mode 的用法大致相同，使用 <code>:</code> 符号与 mode 和其他 env 进行串联，与 mode 组合使用格式形如 <code>attr@mode:env:env|mode:env</code>，为了不与 mode 混淆，当条件编译中仅存在 env 条件时，也需要添加 <code>:</code> 前缀，形如 <code>attr@:env</code>。</p><p>对于同一个 button 组件，微信小程序支持 <code>open-type=&quot;getUserInfo&quot;</code>，但是支付宝小程序支持 <code>open-type=&quot;getAuthorize&quot; </code>。如果不使用任何维度的条件编译，则在编译的时候会有警告和报错信息。</p><p>如果当前编译的目标平台是 wx，以下写法 open-type 属性将被忽略</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type@swan:didi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;获取用户信息&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果当前 env 不是 didi，以下写法 open-type 属性也会被忽略</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type@:didi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;获取用户信息&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果只想在 mode 为 wx 且 env 为 didi 或 qingju 的环境下使用 open-type 属性，则可以这样写：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type@wx:didi:qingju</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getUserInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;获取用户信息&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>env 属性维度的编译同样支持对整个节点或者节点标签名进行条件编译：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @:didi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;this is a  view component&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mpxTagName@:didi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cover-view&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;this is a  view component&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果只声明了 env，没有声明 mode，跨平台输出时框架对于节点属性默认会进行转换：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--srcMode为wx，跨平台输出ali时，bindtap会被转为onTap--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @:didi</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;this is a  view component&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap@:didi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;this is a  view component&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="其他注意事项" tabindex="-1">其他注意事项 <a class="header-anchor" href="#其他注意事项" aria-label="Permalink to &quot;其他注意事项&quot;">​</a></h3><ul><li>当目标平台为支付宝时，需要启用支付宝最新的component2编译才能保障框架正常工作，关于component2<a href="https://docs.alipay.com/mini/framework/custom-component-overview" target="_blank" rel="noreferrer">点此查看详情</a>；</li><li>跨平台源码中自定义组件的标签名不能使用驼峰形式<code>myComponent</code>，请使用横杠形式<code>my-component</code>来书写；</li><li>生成的目标代码中文件名和文件夹名不能带有<code>@</code>符号，目前媒体文件和原生自定义组件在编译时不会修改文件名，需要重点关注。</li></ul><h2 id="跨平台输出web" tabindex="-1">跨平台输出web <a class="header-anchor" href="#跨平台输出web" aria-label="Permalink to &quot;跨平台输出web&quot;">​</a></h2><p>从2.3.0版本开始，Mpx开始支持将已有项目跨平台输出web平台中运行的能力，目前输出web能力完备，能够支持直接转换大型复杂项目，我们会持续对输出web的能力进行优化，不断的建全更全面的适用范围和开发体验。</p><h3 id="技术实现" tabindex="-1">技术实现 <a class="header-anchor" href="#技术实现" aria-label="Permalink to &quot;技术实现&quot;">​</a></h3><p>与小程序平台间的差异相比，web平台和小程序平台间的差异要大很多，小程序相当于是基于web技术的上层封装，所以不同于我们跨平台输出其他小程序平台时以编译转换为主的思路，在输出web时，我们更多地采用了封装的方式来抹平组件/Api和底层环境的差异，与当前大部分的跨平台框架相仿。但与当前大部分跨平台框架以web MVVM框架为base输出到小程序上运行的思路不同，我们是以Mpx小程序增强语法为基础输出到web中运行，前面说过小程序本身是基于web技术进行的实现，小程序-&gt;web的转换在可行性和兼容性上会好一些。</p><p>在具体实现上，Mpx项目输出到web中运行时在组件化和路由层面都是基于Vue生态实现，所以可以将Mpx的跨端输出产物整合到既有的Vue项目中，或者在条件编译中直接使用Vue语法进行web端的实现。</p><h3 id="使用方法-1" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法-1" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><p>使用@mpxjs/cli创建新项目时选择跨平台并选择输出web后，即可生成可输出web的示例项目，运行<code>npm run build:web</code>，就会在dist/web下输出构建后的web项目，并启动静态服务预览运行。</p><h3 id="支持范围" tabindex="-1">支持范围 <a class="header-anchor" href="#支持范围" aria-label="Permalink to &quot;支持范围&quot;">​</a></h3><p>目前对输出web的通用能力支持已经非常完备，下列表格中显示了当前版本中已支持的能力范围</p><h4 id="模板指令" tabindex="-1">模板指令 <a class="header-anchor" href="#模板指令" aria-label="Permalink to &quot;模板指令&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">指令名称</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">Mustache数据绑定</td><td>是</td></tr><tr><td style="text-align:left;">wx:for</td><td>是</td></tr><tr><td style="text-align:left;">wx:for-item</td><td>是</td></tr><tr><td style="text-align:left;">wx:for-index</td><td>是</td></tr><tr><td style="text-align:left;">wx:key</td><td>是</td></tr><tr><td style="text-align:left;">wx:if</td><td>是</td></tr><tr><td style="text-align:left;">wx:elif</td><td>是</td></tr><tr><td style="text-align:left;">wx:else</td><td>是</td></tr><tr><td style="text-align:left;">wx:model</td><td>是</td></tr><tr><td style="text-align:left;">wx:model-prop</td><td>是</td></tr><tr><td style="text-align:left;">wx:model-event</td><td>是</td></tr><tr><td style="text-align:left;">wx:model-value-path</td><td>是</td></tr><tr><td style="text-align:left;">wx:model-filter</td><td>是</td></tr><tr><td style="text-align:left;">wx:class</td><td>是</td></tr><tr><td style="text-align:left;">wx:style</td><td>是</td></tr><tr><td style="text-align:left;">wx:ref</td><td>是</td></tr><tr><td style="text-align:left;">wx:show</td><td>是</td></tr></tbody></table><h4 id="事件绑定方式" tabindex="-1">事件绑定方式 <a class="header-anchor" href="#事件绑定方式" aria-label="Permalink to &quot;事件绑定方式&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">绑定方式</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">bind</td><td>是</td></tr><tr><td style="text-align:left;">catch</td><td>是</td></tr><tr><td style="text-align:left;">capture-bind</td><td>是</td></tr><tr><td style="text-align:left;">capture-catch</td><td>是</td></tr></tbody></table><h4 id="事件名称" tabindex="-1">事件名称 <a class="header-anchor" href="#事件名称" aria-label="Permalink to &quot;事件名称&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">事件名称</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">tap</td><td>是</td></tr><tr><td style="text-align:left;">longpress</td><td>是</td></tr><tr><td style="text-align:left;">longtap</td><td>是</td></tr></tbody></table><p>web同名事件默认全部支持，已支持组件的特殊事件默认为支持，不支持的情况下会在编译时抛出异常</p><h4 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">组件名称</th><th>是否支持</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">audio</td><td>是</td><td></td></tr><tr><td style="text-align:left;">block</td><td>是</td><td></td></tr><tr><td style="text-align:left;">button</td><td>是</td><td></td></tr><tr><td style="text-align:left;">canvas</td><td>是</td><td></td></tr><tr><td style="text-align:left;">checkbox</td><td>是</td><td></td></tr><tr><td style="text-align:left;">checkbox-group</td><td>是</td><td></td></tr><tr><td style="text-align:left;">cover-view</td><td>是</td><td></td></tr><tr><td style="text-align:left;">form</td><td>是</td><td></td></tr><tr><td style="text-align:left;">image</td><td>是</td><td></td></tr><tr><td style="text-align:left;">input</td><td>是</td><td></td></tr><tr><td style="text-align:left;">movable-area</td><td>是</td><td></td></tr><tr><td style="text-align:left;">movable-view</td><td>是</td><td></td></tr><tr><td style="text-align:left;">navigator</td><td>是</td><td></td></tr><tr><td style="text-align:left;">picker</td><td>是</td><td></td></tr><tr><td style="text-align:left;">picker-view</td><td>是</td><td></td></tr><tr><td style="text-align:left;">progress</td><td>是</td><td></td></tr><tr><td style="text-align:left;">radio</td><td>是</td><td></td></tr><tr><td style="text-align:left;">radio-group</td><td>是</td><td></td></tr><tr><td style="text-align:left;">rich-text</td><td>是</td><td></td></tr><tr><td style="text-align:left;">scroll-view</td><td>是</td><td>scroll-view 输出 web 底层滚动依赖 <a href="https://better-scroll.github.io/docs/zh-CN/guide/base-scroll-options.html" target="_blank" rel="noreferrer">BetterScroll</a> 实现，支持额外传入以下属性： <br><br><code>scroll-options</code>: object <br>可重写 BetterScroll 初始化基本配置<br>若出现无法滚动，可尝试手动传入 <code>{ observeDOM: true }</code> <br><br> <code>update-refresh</code>: boolean <br>Vue updated 钩子函数触发时，可用于重新计算 BetterScroll<br><br>tips: 当使用下拉刷新相关属性时，由于 Vue 数据响应机制的限制，在 web 侧可能出现下拉组件状态无法复原的问题，可尝试在 <code>refresherrefresh</code> 事件中，手动将 refresher-triggered 属性值设置为 true</td></tr><tr><td style="text-align:left;">swiper</td><td>是</td><td>swiper 输出 web 底层滚动依赖 <a href="https://better-scroll.github.io/docs/zh-CN/guide/base-scroll-options.html" target="_blank" rel="noreferrer">BetterScroll</a> 实现，支持额外传入以下属性： <br><br><code>scroll-options</code>: object <br>可重写 BetterScroll 初始化基本配置<br>当滑动方向为横向滚动，希望在另一方向保留原生的滚动时，scroll-options 可尝试传入 <code>{ eventPassthrough: vertical }</code>，反之可将 eventPassthrough 设置为 <code>horizontal</code></td></tr><tr><td style="text-align:left;">swiper-item</td><td>是</td><td></td></tr><tr><td style="text-align:left;">switch</td><td>是</td><td></td></tr><tr><td style="text-align:left;">slider</td><td>是</td><td></td></tr><tr><td style="text-align:left;">text</td><td>是</td><td></td></tr><tr><td style="text-align:left;">textarea</td><td>是</td><td></td></tr><tr><td style="text-align:left;">video</td><td>是</td><td></td></tr><tr><td style="text-align:left;">view</td><td>是</td><td></td></tr><tr><td style="text-align:left;">web-view</td><td>是</td><td></td></tr><tr><td style="text-align:left;">在项目的app.json 中配置 &quot;style&quot;: &quot;v2&quot;启用新版的组件样式，涉及的组件有 button icon radio checkbox switch slider在输出web时也与小程序保持了一致</td><td></td><td></td></tr></tbody></table><h4 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">生命周期名称</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">onLaunch</td><td>是</td></tr><tr><td style="text-align:left;">onLoad</td><td>是</td></tr><tr><td style="text-align:left;">onReady</td><td>是</td></tr><tr><td style="text-align:left;">onShow</td><td>是</td></tr><tr><td style="text-align:left;">onHide</td><td>是</td></tr><tr><td style="text-align:left;">onUnload</td><td>是</td></tr><tr><td style="text-align:left;">onError</td><td>是</td></tr><tr><td style="text-align:left;">onServerPrefetch｜是</td><td></td></tr><tr><td style="text-align:left;">created</td><td>是</td></tr><tr><td style="text-align:left;">attached</td><td>是</td></tr><tr><td style="text-align:left;">ready</td><td>是</td></tr><tr><td style="text-align:left;">detached</td><td>是</td></tr><tr><td style="text-align:left;">updated</td><td>是</td></tr><tr><td style="text-align:left;">serverPrefetch</td><td>是</td></tr></tbody></table><h4 id="应用级事件" tabindex="-1">应用级事件 <a class="header-anchor" href="#应用级事件" aria-label="Permalink to &quot;应用级事件&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">应用级事件名称</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">onPageNotFound</td><td>是</td></tr><tr><td style="text-align:left;">onPageScroll</td><td>是</td></tr><tr><td style="text-align:left;">onPullDownRefresh</td><td>是</td></tr><tr><td style="text-align:left;">onReachBottom</td><td>是</td></tr><tr><td style="text-align:left;">onResize</td><td>是</td></tr><tr><td style="text-align:left;">onTabItemTap</td><td>是</td></tr></tbody></table><h4 id="组件配置" tabindex="-1">组件配置 <a class="header-anchor" href="#组件配置" aria-label="Permalink to &quot;组件配置&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">配置项</th><th>支持度</th></tr></thead><tbody><tr><td style="text-align:left;">properties</td><td>部分支持，observer不支持，请使用watch代替</td></tr><tr><td style="text-align:left;">data</td><td>支持</td></tr><tr><td style="text-align:left;">watch</td><td>支持</td></tr><tr><td style="text-align:left;">computed</td><td>支持</td></tr><tr><td style="text-align:left;">relations</td><td>支持</td></tr><tr><td style="text-align:left;">methods</td><td>支持</td></tr><tr><td style="text-align:left;">mixins</td><td>支持</td></tr><tr><td style="text-align:left;">pageLifetimes</td><td>支持</td></tr><tr><td style="text-align:left;">observers</td><td>不支持，请使用watch代替</td></tr><tr><td style="text-align:left;">behaviors</td><td>不支持，请使用mixins代替</td></tr></tbody></table><h4 id="组件api" tabindex="-1">组件API <a class="header-anchor" href="#组件api" aria-label="Permalink to &quot;组件API&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">api名称</th><th>支持度</th></tr></thead><tbody><tr><td style="text-align:left;">triggerEvent</td><td>支持</td></tr><tr><td style="text-align:left;">$nextTick</td><td>支持</td></tr><tr><td style="text-align:left;">createSelectorQuery/selectComponent</td><td>支持</td></tr></tbody></table><h4 id="全局api" tabindex="-1">全局API <a class="header-anchor" href="#全局api" aria-label="Permalink to &quot;全局API&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">api名称</th><th>支持度</th></tr></thead><tbody><tr><td style="text-align:left;">navigateTo</td><td>支持</td></tr><tr><td style="text-align:left;">navigateBack</td><td>支持</td></tr><tr><td style="text-align:left;">redirectTo</td><td>支持</td></tr><tr><td style="text-align:left;">request</td><td>支持</td></tr><tr><td style="text-align:left;">connectSocket</td><td>支持</td></tr><tr><td style="text-align:left;">SocketTask</td><td>支持</td></tr><tr><td style="text-align:left;">EventChannel</td><td>支持</td></tr><tr><td style="text-align:left;">createSelectorQuery</td><td>支持</td></tr><tr><td style="text-align:left;">base64ToArrayBuffer</td><td>支持</td></tr><tr><td style="text-align:left;">arrayBufferToBase64</td><td>支持</td></tr><tr><td style="text-align:left;">nextTick</td><td>支持</td></tr><tr><td style="text-align:left;">set</td><td>支持</td></tr><tr><td style="text-align:left;">setNavigationBarTitle</td><td>支持</td></tr><tr><td style="text-align:left;">setNavigationBarColor</td><td>支持</td></tr><tr><td style="text-align:left;">setStorage</td><td>支持</td></tr><tr><td style="text-align:left;">setStorageSync</td><td>支持</td></tr><tr><td style="text-align:left;">getStorage</td><td>支持</td></tr><tr><td style="text-align:left;">getStorageSync</td><td>支持</td></tr><tr><td style="text-align:left;">getStorageInfo</td><td>支持</td></tr><tr><td style="text-align:left;">getStorageInfoSync</td><td>支持</td></tr><tr><td style="text-align:left;">removeStorage</td><td>支持</td></tr><tr><td style="text-align:left;">removeStorageSync</td><td>支持</td></tr><tr><td style="text-align:left;">clearStorage</td><td>支持</td></tr><tr><td style="text-align:left;">clearStorageSync</td><td>支持</td></tr><tr><td style="text-align:left;">getSystemInfo</td><td>支持</td></tr><tr><td style="text-align:left;">getSystemInfoSync</td><td>支持</td></tr><tr><td style="text-align:left;">showModal</td><td>支持</td></tr><tr><td style="text-align:left;">showToast</td><td>支持</td></tr><tr><td style="text-align:left;">hideToast</td><td>支持</td></tr><tr><td style="text-align:left;">showLoading</td><td>支持</td></tr><tr><td style="text-align:left;">hideLoading</td><td>支持</td></tr><tr><td style="text-align:left;">onWindowResize</td><td>支持</td></tr><tr><td style="text-align:left;">offWindowResize</td><td>支持</td></tr><tr><td style="text-align:left;">createAnimation</td><td>支持</td></tr></tbody></table><h4 id="json配置" tabindex="-1">JSON配置 <a class="header-anchor" href="#json配置" aria-label="Permalink to &quot;JSON配置&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">配置项</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">backgroundColor</td><td>是</td></tr><tr><td style="text-align:left;">backgroundTextStyle</td><td>是</td></tr><tr><td style="text-align:left;">disableScroll</td><td>是</td></tr><tr><td style="text-align:left;">enablePullDownRefresh</td><td>是</td></tr><tr><td style="text-align:left;">onReachBottomDistance</td><td>是</td></tr><tr><td style="text-align:left;">packages</td><td>是</td></tr><tr><td style="text-align:left;">pages</td><td>是</td></tr><tr><td style="text-align:left;">navigationBarBackgroundColor</td><td>是</td></tr><tr><td style="text-align:left;">navigationBarTextStyle</td><td>是</td></tr><tr><td style="text-align:left;">navigationBarTitleText</td><td>是</td></tr><tr><td style="text-align:left;">networkTimeout</td><td>是</td></tr><tr><td style="text-align:left;">subpackages</td><td>是</td></tr><tr><td style="text-align:left;">tabBar</td><td>是</td></tr><tr><td style="text-align:left;">usingComponents</td><td>是</td></tr></tbody></table><h4 id="拓展能力" tabindex="-1">拓展能力 <a class="header-anchor" href="#拓展能力" aria-label="Permalink to &quot;拓展能力&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">能力</th><th>是否支持</th></tr></thead><tbody><tr><td style="text-align:left;">fetch</td><td>是</td></tr><tr><td style="text-align:left;">i18n</td><td>是</td></tr></tbody></table><h4 id="小程序其他原生能力" tabindex="-1">小程序其他原生能力 <a class="header-anchor" href="#小程序其他原生能力" aria-label="Permalink to &quot;小程序其他原生能力&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">能力</th><th>支持度</th></tr></thead><tbody><tr><td style="text-align:left;">wxs</td><td>支持</td></tr><tr><td style="text-align:left;">animation</td><td>支持组件的animation属性，支持所有animation对象方法(export、step、width、height、rotate、scale、skew、translate等等)</td></tr></tbody></table>`,158),e=[n];function h(p,d,k,r,E,o){return t(),i("div",null,e)}const c=s(l,[["render",h]]);export{y as __pageData,c as default};
