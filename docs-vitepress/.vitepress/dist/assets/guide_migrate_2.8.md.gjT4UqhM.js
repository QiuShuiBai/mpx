import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.CwvFaCp2.js";const g=JSON.parse('{"title":"从 2.7 升级至 2.8","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migrate/2.8.md","filePath":"guide/migrate/2.8.md"}'),t={name:"guide/migrate/2.8.md"},e=n(`<h1 id="从-2-7-升级至-2-8" tabindex="-1">从 2.7 升级至 2.8 <a class="header-anchor" href="#从-2-7-升级至-2-8" aria-label="Permalink to &quot;从 2.7 升级至 2.8&quot;">​</a></h1><p>不同于 2.7 版本对于编译构建进行的大幅度变动升级，Mpx@2.8 版本升级的核心在于运行时支持组合式 API 能力，并尽可能追求向前兼容，以降低用户的升级成本。我们默认脚手架生成的全新项目已经适配了 2.8 版本的全部变更，如果你需要将旧项目从 2.7 升级至 2.8 版本，下面是详细的升级指引。</p><h2 id="依赖升级" tabindex="-1">依赖升级 <a class="header-anchor" href="#依赖升级" aria-label="Permalink to &quot;依赖升级&quot;">​</a></h2><p>请按照下方列表升级或新增相关依赖：</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/api-proxy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/store&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/pinia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/fetch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这部分依赖为输出 web 专用，如项目无需输出 web 可以省略</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.7.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue-demi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^0.13.11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue-i18n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^8.27.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue-i18n-bridge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9.2.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/size-report&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/babel-plugin-inject-page-events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="编译配置变更" tabindex="-1">编译配置变更 <a class="header-anchor" href="#编译配置变更" aria-label="Permalink to &quot;编译配置变更&quot;">​</a></h2><p>在编译配置方面，用户几乎不用进行任何改变，唯一的例外是当用户想要通过组合式 API 的方式注册具有副作用的页面事件时，需要在 <code>babel</code> 配置中添加 <code>@mpxjs/babel-plugin-inject-page-events</code> 插件，如下所示：</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// babel.config.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@babel/transform-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;corejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.10.4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@mpxjs/babel-plugin-inject-page-events&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于副作用页面事件的更多详情查看<a href="./../composition-api/composition-api.html#具有副作用的页面事件">这里</a>。</p><h2 id="运行时破坏性变化" tabindex="-1">运行时破坏性变化 <a class="header-anchor" href="#运行时破坏性变化" aria-label="Permalink to &quot;运行时破坏性变化&quot;">​</a></h2><p>在 2.8 开发过程中，我们修正了过去版本中存在的不合理的设计与实现，在运行时带来了少许破坏性改变，详情如下：</p><ul><li>框架过往提供的组件增强生命周期 <code>pageShow/pageHide</code> 与微信原生提供的 <code>pageLifetimes.show/hide</code> 完全对齐，不再提供组件初始挂载时必定执行 <code>pageShow</code> 的保障（因为组件可能在后台页面进行挂载），相关初始化逻辑一定不要放置在 <code>pageShow</code> 当中；</li><li>取消了框架过去提供的基于内部生命周期实现的非标准增强生命周期，如 <code>beforeCreate/onBeforeCreate</code> 等，直接将内部生命周期变量导出提供给用户使用，详情查看<a href="./../composition-api/composition-api.html#框架内置生命周期">这里</a>；</li><li>为了优化 tree shaking，作为框架运行时 <code>default export</code> 的 <code>Mpx</code> 对象不再挂载 <code>createComponent/createStore</code> 等运行时方法，一律通过 <code>named export</code> 提供，<code>Mpx</code> 对象上仅保留 <code>set/use</code> 等全局 API；</li><li>使用 I18n 能力时，为了与新版 vue-i18n 保持对齐，<code>this.$i18n</code> 对象指向全局作用域，如需创建局部作用域需要使用组合式 API <code>useI18n</code> 的方式进行创建。</li><li><code>watch</code> API 不再接受第二个参数为带有 <code>handler</code> 属性的对象形式（该参数形式只应存在于 <code>watch</code> option 中），第二个参数必须为回调函数，与 <a href="https://vuejs.org/api/reactivity-core.html#watch" target="_blank" rel="noreferrer">Vue</a> 对齐。</li></ul>`,12),p=[e];function h(l,k,E,o,d,r){return a(),i("div",null,p)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
