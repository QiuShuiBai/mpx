import{_ as s,c as i,o as a,a7 as d,j as t}from"./chunks/framework.CwvFaCp2.js";const u=JSON.parse('{"title":"Mpx转RN模版使用指南","description":"","frontmatter":{},"headers":[],"relativePath":"rn-template.md","filePath":"rn-template.md"}'),e={name:"rn-template.md"},l=d(`<h1 id="mpx转rn模版使用指南" tabindex="-1">Mpx转RN模版使用指南 <a class="header-anchor" href="#mpx转rn模版使用指南" aria-label="Permalink to &quot;Mpx转RN模版使用指南&quot;">​</a></h1><h2 id="模版指令" tabindex="-1">模版指令 <a class="header-anchor" href="#模版指令" aria-label="Permalink to &quot;模版指令&quot;">​</a></h2><p>目前 Mpx 输出 React Native 仅支持以下指令，具体使用范围可参考如下文档</p><table tabindex="0"><thead><tr><th>指令名</th><th>说明</th></tr></thead><tbody><tr><td>wx:if</td><td>根据表达式的值的来有条件地渲染元素</td></tr><tr><td>wx:elif</td><td>根据表达式的值的来有条件地渲染元素，前一兄弟元素必须有 wx:if 或 wx:elif</td></tr><tr><td>wx:else</td><td>不需要表达式，前一兄弟元素必须有 wx:if 或 wx:elif</td></tr><tr><td>wx:show</td><td>根据表达式的值的来有条件地渲染元素，与 wx:if 所不同的是不会移除节点，而是设置节点的 style 为 display: none</td></tr><tr><td>wx:style</td><td>动态绑定 style 样式</td></tr><tr><td>wx:class</td><td>动态绑定 class 样式</td></tr><tr><td>wx:for</td><td>在组件上使用 wx:for 绑定一个数组，即可使数组中各项的数据重复渲染该组件</td></tr><tr><td>wx:for-item</td><td>指定数组当前元素的变量名</td></tr><tr><td>wx:for-index</td><td>指定数组当前下标的变量名</td></tr><tr><td>wx:key</td><td>指定列表中项目的唯一的标识符</td></tr><tr><td>wx:ref</td><td>获取节点信息</td></tr><tr><td>mpxTagName</td><td>动态转换标签</td></tr><tr><td>component</td><td>使用 component is 动态切换组件</td></tr><tr><td>@mode</td><td>使用 @ 符号来指定某个节点或属性只在某些平台下有效</td></tr><tr><td>@_mode</td><td>隐式属性条件编译，仅控制节点的展示，保留节点属性的平台转换能力</td></tr><tr><td>@env</td><td>自定义 env 目标应用，来实现在不同应用下编译产出不同的代码</td></tr></tbody></table><h2 id="事件编写" tabindex="-1">事件编写 <a class="header-anchor" href="#事件编写" aria-label="Permalink to &quot;事件编写&quot;">​</a></h2><p>目前 Mpx 输出 React Native 的事件编写遵循小程序的事件编写规范，支持事件的冒泡及捕获</p><p>普通事件绑定</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Click here!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>绑定并阻止事件冒泡</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> catchtap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Click here!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>事件捕获</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> capture-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touchstart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  outer view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> capture-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touchstart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inner view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>中断捕获阶段和取消冒泡阶段</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> capture-catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touchstart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  outer view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在此基础上也新增了事件处理内联传参的增强机制。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> &lt;!--Mpx增强语法，模板内联传参，方便简洁--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTapInline(&#39;b&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;b&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 直接通过参数获取数据，直观方便</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleTapInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>除此之外，Mpx 也支持了动态事件绑定</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> &lt;!--动态事件绑定--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{items}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleTap_{{index}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{item}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mpxjs/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Item 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Item 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Item 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Item 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleTap_0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tapped on item 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleTap_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tapped on item 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleTap_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tapped on item 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleTap_3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tapped on item 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意事项：</p><p>当同一个元素上同时绑定了 catchtap 和 bindtap 事件时:</p><p>两个事件都会被触发执行。 但是是否阻止事件冒泡的行为,会以模板上第一个绑定的事件标识符为准。 如果第一个绑定的是 catchtap，那么不管后面绑定的是什么,都会阻止事件冒泡。 如果第一个绑定的是 bindtap，则不会阻止事件冒泡。</p><p>同理,如果同一个元素上绑定了 capture-bind:tap 和 bindtap:</p><p>事件的执行时机会根据模板上第一个绑定事件的标识符来决定: 如果第一个绑定的是 capture-bind:tap，则事件会在捕获阶段触发。 如果第一个绑定的是 bindtap，则事件会在冒泡阶段触发。</p><h2 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h2><p>目前 Mpx 输出 React Native 仅支持以下组件，具体使用范围可参考如下文档</p><h3 id="view" tabindex="-1">view <a class="header-anchor" href="#view" aria-label="Permalink to &quot;view&quot;">​</a></h3><p>视图容器。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>hover-class</td><td>string</td><td></td><td>指定按下去的样式类。</td></tr><tr><td>hover-start-time</td><td>number</td><td>50</td><td>按住后多久出现点击态，单位毫秒</td></tr><tr><td>hover-stay-time</td><td>number</td><td>400</td><td>手指松开后点击态保留时间，单位毫秒</td></tr><tr><td>enable-offset</td><td>Number</td><td>false</td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>bindtap</td><td>点击的时候触发</td></tr></tbody></table><h3 id="text" tabindex="-1">text <a class="header-anchor" href="#text" aria-label="Permalink to &quot;text&quot;">​</a></h3><p>文本。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>user-select</td><td>boolean</td><td><code>false</code></td><td>文本是否可选。</td></tr><tr><td>disable-default-style</td><td>boolean</td><td><code>false</code></td><td>会内置默认样式，比如fontSize为16。设置<code>true</code>可以禁止默认的内置样式。</td></tr><tr><td>enable-offset</td><td>Number</td><td>false</td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>bindtap</td><td>点击的时候触发</td></tr></tbody></table><p>注意事项</p><ol><li>未包裹 text 标签的文本，会自动包裹 text 标签。</li><li>text 组件开启 enable-offset 后，offsetLeft、offsetWidth 获取时机仅为组件首次渲染阶段</li></ol><h3 id="image" tabindex="-1">image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;image&quot;">​</a></h3><p>图片。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td><code>false</code></td><td>图片资源地址，支持本地图片资源及 base64 格式数据，暂不支持 svg 格式</td></tr><tr><td>mode</td><td>String</td><td><code>scaleToFill</code></td><td>图片裁剪、缩放的模式，适配微信 image 所有 mode 格式</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p>`,44),n=t("table",{tabindex:"0"},[t("thead",null,[t("tr",null,[t("th",null,"事件名"),t("th",null,"说明")])]),t("tbody",null,[t("tr",{errMsg:""},[t("td",null,"binderror"),t("td",null,"当错误发生时触发，event.detail =")]),t("tr",null,[t("td",null,"bindload"),t("td",null,"当图片载入完毕时触发，event.detail =")])])],-1),h=d('<p>注意事项</p><ol><li>image 组件默认宽度320px、高度240px</li><li>image 组件进行缩放时，计算出来的宽高可能带有小数，在不同webview内核下渲染可能会被抹去小数部分</li></ol><h3 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h3><p>输入框。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>输入框的初始内容</td></tr><tr><td>type</td><td>String</td><td><code>text</code></td><td>input 的类型，不支持 <code>safe-password</code>、<code>nickname</code></td></tr><tr><td>password</td><td>Boolean</td><td><code>false</code></td><td>是否是密码类型</td></tr><tr><td>placeholder</td><td>String</td><td></td><td>输入框为空时占位符</td></tr><tr><td>placeholder-class</td><td>String</td><td></td><td>指定 placeholder 的样式类，仅支持 color 属性</td></tr><tr><td>placeholder-style</td><td>String</td><td></td><td>指定 placeholder 的样式，仅支持 color 属性</td></tr><tr><td>disabled</td><td>Boolean</td><td><code>false</code></td><td>是否禁用</td></tr><tr><td>maxlength</td><td>Number</td><td><code>140</code></td><td>最大输入长度，设置为 -1 的时候不限制最大长度</td></tr><tr><td>auto-focus</td><td>Boolean</td><td><code>false</code></td><td>(即将废弃，请直接使用 focus )自动聚焦，拉起键盘</td></tr><tr><td>focus</td><td>Boolean</td><td><code>false</code></td><td>获取焦点</td></tr><tr><td>confirm-type</td><td>String</td><td><code>done</code></td><td>设置键盘右下角按钮的文字，仅在 type=&#39;text&#39; 时生效</td></tr><tr><td>confirm-hold</td><td>Boolean</td><td><code>false</code></td><td>点击键盘右下角按钮时是否保持键盘不收起</td></tr><tr><td>cursor</td><td>Number</td><td></td><td>指定 focus 时的光标位置</td></tr><tr><td>cursor-color</td><td>String</td><td></td><td>光标颜色</td></tr><tr><td>selection-start</td><td>Number</td><td><code>-1</code></td><td>光标起始位置，自动聚集时有效，需与 selection-end 搭配使用</td></tr><tr><td>selection-end</td><td>Number</td><td><code>-1</code></td><td>光标结束位置，自动聚集时有效，需与 selection-start 搭配使用</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>bindinput</td><td>键盘输入时触发，event.detail = { value, cursor }，不支持 <code>keyCode</code></td></tr><tr><td>bindfocus</td><td>输入框聚焦时触发，event.detail = { value }，不支持 <code>height</code></td></tr><tr><td>bindblur</td><td>输入框失去焦点时触发，event.detail = { value }，不支持 <code>encryptedValue</code>、<code>encryptError</code></td></tr><tr value=""><td>bindconfirm</td><td>点击完成按钮时触发，event.detail =</td></tr><tr><td>bind:selectionchange</td><td>选区改变事件, event.detail =</td></tr></tbody></table><p>方法</p><p>可通过 <code>ref</code> 方式调用以下组件实例方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>focus</td><td>使输入框得到焦点</td></tr><tr><td>blur</td><td>使输入框失去焦点</td></tr><tr><td>clear</td><td>清空输入框的内容</td></tr><tr><td>isFocused</td><td>返回值表明当前输入框是否获得了焦点</td></tr></tbody></table><h3 id="textarea" tabindex="-1">textarea <a class="header-anchor" href="#textarea" aria-label="Permalink to &quot;textarea&quot;">​</a></h3><p>多行输入框。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>输入框内容</td></tr><tr><td>type</td><td>String</td><td><code>text</code></td><td>input 的类型，不支持 <code>safe-password</code>、<code>nickname</code></td></tr><tr><td>placeholder</td><td>String</td><td></td><td>输入框为空时占位符</td></tr><tr><td>placeholder-class</td><td>String</td><td></td><td>指定 placeholder 的样式类，仅支持 color 属性</td></tr><tr><td>placeholder-style</td><td>String</td><td></td><td>指定 placeholder 的样式，仅支持 color 属性</td></tr><tr><td>disabled</td><td>Boolean</td><td><code>false</code></td><td>是否禁用</td></tr><tr><td>maxlength</td><td>Number</td><td><code>140</code></td><td>最大输入长度，设置为 -1 的时候不限制最大长度</td></tr><tr><td>auto-focus</td><td>Boolean</td><td><code>false</code></td><td>(即将废弃，请直接使用 focus )自动聚焦，拉起键盘</td></tr><tr><td>focus</td><td>Boolean</td><td><code>false</code></td><td>获取焦点</td></tr><tr><td>auto-height</td><td>Boolean</td><td><code>false</code></td><td>是否自动增高，设置 auto-height 时，style.height不生效</td></tr><tr><td>confirm-type</td><td>String</td><td><code>done</code></td><td>设置键盘右下角按钮的文字，不支持 <code>return</code></td></tr><tr><td>confirm-hold</td><td>Boolean</td><td><code>false</code></td><td>点击键盘右下角按钮时是否保持键盘不收起</td></tr><tr><td>cursor</td><td>Number</td><td></td><td>指定 focus 时的光标位置</td></tr><tr><td>cursor-color</td><td>String</td><td></td><td>光标颜色</td></tr><tr><td>selection-start</td><td>Number</td><td><code>-1</code></td><td>光标起始位置，自动聚集时有效，需与 selection-end 搭配使用</td></tr><tr><td>selection-end</td><td>Number</td><td><code>-1</code></td><td>光标结束位置，自动聚集时有效，需与 selection-start 搭配使用</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>bindinput</td><td>键盘输入时触发，event.detail = { value, cursor }，不支持 <code>keyCode</code></td></tr><tr><td>bindfocus</td><td>输入框聚焦时触发，event.detail = { value }，不支持 <code>height</code></td></tr><tr><td>bindblur</td><td>输入框失去焦点时触发，event.detail = { value }，不支持 <code>encryptedValue</code>、<code>encryptError</code></td></tr><tr value=""><td>bindconfirm</td><td>点击完成按钮时触发，event.detail =</td></tr><tr><td>bindlinechange</td><td>输入框行数变化时调用，event.detail = { height: 0, lineCount: 0 }，不支持 <code>heightRpx</code></td></tr><tr><td>bind:selectionchange</td><td>选区改变事件,</td></tr></tbody></table><p>方法</p><p>可通过 <code>ref</code> 方式调用以下组件实例方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>focus</td><td>使输入框得到焦点</td></tr><tr><td>blur</td><td>使输入框失去焦点</td></tr><tr><td>clear</td><td>清空输入框的内容</td></tr><tr><td>isFocused</td><td>返回值表明当前输入框是否获得了焦点</td></tr></tbody></table><h3 id="button" tabindex="-1">button <a class="header-anchor" href="#button" aria-label="Permalink to &quot;button&quot;">​</a></h3><p>按钮。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>String</td><td><code>default</code></td><td>按钮的大小</td></tr><tr><td>type</td><td>String</td><td><code>default</code></td><td>按钮的样式类型</td></tr><tr><td>plain</td><td>Boolean</td><td><code>false</code></td><td>按钮是否镂空，背景色透明</td></tr><tr><td>disabled</td><td>Boolean</td><td><code>false</code></td><td>是否禁用</td></tr><tr><td>loading</td><td>Boolean</td><td><code>false</code></td><td>名称前是否带 loading 图标</td></tr><tr><td>open-type</td><td>String</td><td></td><td>微信开放能力，当前仅支持 <code>share</code></td></tr><tr><td>hover-class</td><td>String</td><td></td><td>指定按钮按下去的样式类。当 hover-class=&quot;none&quot; 时，没有点击态效果</td></tr><tr><td>hover-start-time</td><td>Number</td><td><code>20</code></td><td>按住后多久出现点击态，单位毫秒</td></tr><tr><td>hover-stay-time</td><td>Number</td><td><code>70</code></td><td>手指松开后点击态保留时间，单位毫秒</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><h3 id="scroll-view" tabindex="-1">scroll-view <a class="header-anchor" href="#scroll-view" aria-label="Permalink to &quot;scroll-view&quot;">​</a></h3><p>可滚动视图区域。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>scroll-x</td><td>Boolean</td><td><code>false</code></td><td>允许横向滚动动</td></tr><tr><td>scroll-y</td><td>Boolean</td><td><code>false</code></td><td>允许纵向滚动</td></tr><tr><td>upper-threshold</td><td>Number</td><td><code>50</code></td><td>距顶部/左边多远时(单位 px),触发 scrolltoupper 事件</td></tr><tr><td>lower-threshold</td><td>Number</td><td><code>50</code></td><td>距底部/右边多远时(单位 px),触发 scrolltolower 事件</td></tr><tr><td>scroll-top</td><td>Number</td><td><code>0</code></td><td>设置纵向滚动条位置</td></tr><tr><td>scroll-left</td><td>Number</td><td><code>0</code></td><td>设置横向滚动条位置</td></tr><tr><td>scroll-with-animation</td><td>Boolean</td><td><code>false</code></td><td>在设置滚动条位置时使用动画过渡</td></tr><tr><td>enable-back-to-top</td><td>Boolean</td><td><code>false</code></td><td>点击状态栏的时候视图会滚动到顶部</td></tr><tr><td>enhanced</td><td>Boolean</td><td><code>false</code></td><td>scroll-view 组件功能增强</td></tr><tr><td>refresher-enabled</td><td>Boolean</td><td><code>false</code></td><td>开启自定义下拉刷新</td></tr><tr><td>scroll-anchoring</td><td>Boolean</td><td><code>false</code></td><td>开启滚动区域滚动锚点</td></tr><tr><td>refresher-default-style</td><td>String</td><td><code>&#39;black&#39;</code></td><td>设置下拉刷新默认样式,支持 <code>black</code>、<code>white</code>、<code>none</code>，仅安卓支持</td></tr><tr><td>refresher-background</td><td>String</td><td><code>&#39;#fff&#39;</code></td><td>设置自定义下拉刷新背景颜色，仅安卓支持</td></tr><tr><td>refresher-triggered</td><td>Boolean</td><td><code>false</code></td><td>设置当前下拉刷新状态,true 表示已触发</td></tr><tr><td>paging-enabled</td><td>Number</td><td><code>false</code></td><td>分页滑动效果 (同时开启 enhanced 属性后生效)，当值为 true 时，滚动条会停在滚动视图的尺寸的整数倍位置</td></tr><tr><td>show-scrollbar</td><td>Number</td><td><code>true</code></td><td>滚动条显隐控制 (同时开启 enhanced 属性后生效)</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>binddragstart</td><td>滑动开始事件，同时开启 enhanced 属性后生效</td></tr><tr><td>binddragging</td><td>滑动事件，同时开启 enhanced 属性后生效</td></tr><tr><td>binddragend</td><td>滑动结束事件，同时开启 enhanced 属性后生效</td></tr><tr><td>bindscrolltoupper</td><td>滚动到顶部/左边触发</td></tr><tr><td>bindscrolltolower</td><td>滚动到底部/右边触发</td></tr><tr><td>bindscroll</td><td>滚动时触发</td></tr><tr><td>bindrefresherrefresh</td><td>自定义下拉刷新被触发</td></tr></tbody></table><p>注意事项</p><ol><li>目前不支持自定义下拉刷新节点，使用 slot=&quot;refresher&quot; 声明无效，在 React Native 环境中还是会被当作普通节点渲染出来</li></ol><h3 id="swiper" tabindex="-1">swiper <a class="header-anchor" href="#swiper" aria-label="Permalink to &quot;swiper&quot;">​</a></h3><p>滑块视图容器。</p><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>indicator-dots</td><td>Boolean</td><td><code>false</code></td><td>是否显示面板指示点</td></tr><tr><td>indicator-color</td><td>color</td><td><code>rgba(0, 0, 0, .3)</code></td><td>指示点颜色</td></tr><tr><td>indicator-active-color</td><td>color</td><td><code>#000000</code></td><td>当前选中的指示点颜色</td></tr><tr><td>autoplay</td><td>Boolean</td><td><code>false</code></td><td>是否自动切换</td></tr><tr><td>current</td><td>Number</td><td><code>0</code></td><td>当前所在滑块的 index</td></tr><tr><td>interval</td><td>Number</td><td><code>5000</code></td><td>自动切换时间间隔</td></tr><tr><td>duration</td><td>Number</td><td><code>500</code></td><td>滑动动画时长</td></tr><tr><td>circular</td><td>Boolean</td><td><code>false</code></td><td>是否采用衔接滑动</td></tr><tr><td>vertical</td><td>Boolean</td><td><code>false</code></td><td>滑动方向是否为纵向</td></tr><tr><td>previous-margin</td><td>String</td><td><code>0</code></td><td>前边距，可用于露出前一项的一小部分，接受px</td></tr><tr><td>next-margin</td><td>String</td><td><code>0</code></td><td>后边距，可用于露出后一项的一小部分，接受px</td></tr><tr><td>enable-offset</td><td>Number</td><td><code>false</code></td><td>设置是否要获取组件的布局信息，若设置了该属性，会在 e.target 中返回组件的 offsetLeft、offsetWidth 信息</td></tr></tbody></table><p>事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>bindchange</td><td>current 改变时会触发 change 事件，event.detail =</td></tr></tbody></table><h3 id="swiper-item" tabindex="-1">swiper-item <a class="header-anchor" href="#swiper-item" aria-label="Permalink to &quot;swiper-item&quot;">​</a></h3><ol><li>仅可放置在swiper组件中，宽高自动设置为100%。</li></ol><p>属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>item-id</td><td>string</td><td><code>无</code></td><td>该 swiper-item 的标识符</td></tr></tbody></table>',42),r=[l,n,h];function p(o,k,c,E,g,y){return a(),i("div",null,r)}const f=s(e,[["render",p]]);export{u as __pageData,f as default};
