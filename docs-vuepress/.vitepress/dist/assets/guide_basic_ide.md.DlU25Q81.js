import{_ as t,c as e,o as s,a7 as a}from"./chunks/framework.CwvFaCp2.js";const i="/assets/start-tips2.DL_IWEZM.png",o="/assets/start-tips1.B10pt_bp.png",f=JSON.parse('{"title":"IDE 高亮配置","description":"","frontmatter":{},"headers":[],"relativePath":"guide/basic/ide.md","filePath":"guide/basic/ide.md"}'),p={name:"guide/basic/ide.md"},n=a('<h1 id="ide-高亮配置" tabindex="-1">IDE 高亮配置 <a class="header-anchor" href="#ide-高亮配置" aria-label="Permalink to &quot;IDE 高亮配置&quot;">​</a></h1><ul><li><a href="./ide.html#IntelliJ">IntelliJ</a></li><li><a href="./ide.html#vscode">vscode</a></li></ul><h2 id="intellij" tabindex="-1">IntelliJ <a class="header-anchor" href="#intellij" aria-label="Permalink to &quot;IntelliJ&quot;">​</a></h2><p>如果使用 IntelliJ 系 IDE 开发，可将<code>.mpx</code>后缀文件关联到<code>vue</code>模板类型，按<code>vue</code>模板解析。</p><p><img src="'+i+'" alt="关联文件类型"></p><p>但会报一个<code>warning</code>提示有重复的<code>script</code>标签，关闭该警告即可。</p><p><img src="'+o+`" alt="关闭警告"></p><h2 id="vscode" tabindex="-1">vscode <a class="header-anchor" href="#vscode" aria-label="Permalink to &quot;vscode&quot;">​</a></h2><blockquote><p><a href="https://github.com/mpx-ecology/vscode-mpx" target="_blank" rel="noreferrer">git地址</a>，有任何vscode插件的问题和需求可在仓库中提issue</p></blockquote><blockquote><p>下载</p></blockquote><ol><li><p><a href="https://marketplace.visualstudio.com/items?itemName=pagnkelly.mpx" target="_blank" rel="noreferrer">下载地址</a></p></li><li><p>也可直接在vscode扩展处搜索mpx即可下载</p></li></ol><blockquote><p>使用</p></blockquote><h3 id="插件功能介绍" tabindex="-1">插件功能介绍 <a class="header-anchor" href="#插件功能介绍" aria-label="Permalink to &quot;插件功能介绍&quot;">​</a></h3><ul><li>高亮</li><li>emmet</li><li>跳转定义</li><li>自动补全</li><li>eslint</li><li>格式化</li></ul><p><a href="https://gift-static.hongyibo.com.cn/static/kfpub/3227/vscodes.mp4" target="_blank" rel="noreferrer">视频介绍</a></p><h4 id="高亮" tabindex="-1">高亮 <a class="header-anchor" href="#高亮" aria-label="Permalink to &quot;高亮&quot;">​</a></h4><p>  与其他语言插件无异，提供相应代码的高亮，因为Mpx分为四个模块，所以每个模块都有相应的语法高亮，还包括注释快捷键，也区分了相应模块，比如<code>&lt;template&gt;</code>中使用的是html的高亮，且注释是<code>&lt;!-- --&gt;</code>,而<code>&lt;script&gt;</code>中就是<code>js</code>的高亮，注释是<code>//</code></p><p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/codelight.jpeg" alt="image"></p><h4 id="emmet" tabindex="-1">emmet <a class="header-anchor" href="#emmet" aria-label="Permalink to &quot;emmet&quot;">​</a></h4><p>  早在使用sublime时就在使用emmet插件，以提高写HTML的效率。</p><p>  比如键入多个<code>&lt;view&gt;</code>标签：<code>view*n</code>。</p><p>  比如一些标签的快速键入，配合<code>tab</code>或者<code>Enter</code>键快速键入</p><p>  不仅仅是<code>&lt;template&gt;</code>模块，css，scss，less，stylus，sass模块也有相应的快捷指令</p><p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/6168/QQ20210728-200258.gif" alt="image"><img src="https://gift-static.hongyibo.com.cn/static/kfpub/6168/QQ20210728-200331.gif" alt="image"></p><p>提示组件标签</p><p>我们可以像编写 html 一样，只要输入对应的单词就会出现对应的标签，比如输入的是 view ，然后按下 tab 键，即可输入 <code>&lt;view&gt;&lt;/view&gt;</code> 标签。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/tishi1_v2.png" width="500" alt="图片名称"><p>组件指令提示</p><p>指令的提示类似于 vue 文件一样，只要输入对应的指令前缀就会出现对应的完整指令，比如输入的是 wx ，然后按下 tab 键，就可以输入 wx:if=&quot;&quot; 指令。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/tishi2_v2.png" width="500" alt="图片名称"><p>组件属性提示</p><p>微信小程序的每个组件都有一些属性选项，在编写组件的时候输入前缀就会出现完整的属性，并且包含了属性的说明和属性的类型。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/tishi3_v2.png" width="500" alt="图片名称"><p>组件事件提示</p><p>给组件绑定事件，也是只需要输入事件的前缀，就会出现完整的事件列表，然后按下 tab 键，即可输入 bindtap=&quot;&quot; 类似的事件。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/tishi4_v2.png" width="500" alt="图片名称"><h4 id="跳转定义" tabindex="-1">跳转定义 <a class="header-anchor" href="#跳转定义" aria-label="Permalink to &quot;跳转定义&quot;">​</a></h4><p>  command + 鼠标左键 查看定义位置，也可以在当前文件查看内容，决定是否跳转</p><p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/6168/QQ20210728-200848.gif" alt="image"></p><h4 id="自动补全" tabindex="-1">自动补全 <a class="header-anchor" href="#自动补全" aria-label="Permalink to &quot;自动补全&quot;">​</a></h4><p>  毕竟Mpx是个小程序的框架，对于微信和支付宝的api快速补全snippets没有怎么能行，可在<code>&lt;script&gt;</code>中通过键入部分文字插入相应的代码块</p><p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/6168/QQ20210728-201858.gif" alt="image"></p><h4 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h4><p>  eslint这块要分两部分来讲，一部分是插件实现了按照模块区分的简单的eslint，另一部分是要配合eslint的vscode插件，配置.eslintrc高阶的eslint检测。</p><p>部分一可通过配置开关</p><p><code>&lt;template&gt;</code>是通过我们自己实现的eslint插件<code>eslint-plugin-mpx</code>，通过调eslint提供的引擎api，返回eslint校验的结果，我们再进行展示。</p><p><code>&lt;script&gt;</code>中是通过调用typescript提供的检测js代码的api来进行检测，返回 的校验结果也是不太符合语法的，基础的检测，不会过于苛刻</p><p><code>&lt;style&gt;</code>中会根据lang的设定进行相应的检测，此检测是vscode官方提供的库 <code>vscode-css-languageservice</code></p><p><code>&lt;json&gt;</code>模块同tempalte，用到了一个eslint插件<code>eslint-plugin-jsonc</code>来检测json的部分</p><p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/vscodeseting.png" alt="image"></p><p>部分二可参照此<a href="https://github.com/mpx-ecology/vscode-mpx/issues/35" target="_blank" rel="noreferrer">链接</a>配置</p><h4 id="代码格式化" tabindex="-1">代码格式化 <a class="header-anchor" href="#代码格式化" aria-label="Permalink to &quot;代码格式化&quot;">​</a></h4><p>支持代码格式化 JavaScript (ts)· JSON · CSS (less/scss/stylus) · WXML，通过鼠标右键选择代码格式化文档。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/format_v2.png" width="500" alt="图片名称"><p>默认每个区块都是调用 Prettier 这个库来完成格式化的，当然也可以在设置中切换成使用其他库。</p><img src="https://gift-static.hongyibo.com.cn/static/kfpub/3547/format2_v3.png" width="500" alt="图片名称"><p>如果切换成 none 将会禁用格式化。</p><p>Prettier 支持从项目根目录读取 .prettierrc 配置文件。配置选项可以参考 <a href="https://prettier.io/docs/en/configuration.html" target="_blank" rel="noreferrer">官方</a> 文档。.prettierrc 文件可以使用 JSON 语法编写，比如下面这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;tabWidth&quot;: 4,</span></span>
<span class="line"><span>  &quot;semi&quot;: false,</span></span>
<span class="line"><span>  &quot;singleQuote&quot;: true</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>注意：由于 Prettier 这个库不支持格式化 stylus 语法，所以 stylus 的格式化使用另外一个 stylus-supremacy 库，配置 stylus 格式化规则只能在编辑器的 settings 中配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;mpx.format.defaultFormatterOptions&quot;: {</span></span>
<span class="line"><span>  &quot;stylus-supremacy&quot;: {</span></span>
<span class="line"><span>    &quot;insertColons&quot;: false, // 不使用括号</span></span>
<span class="line"><span>    &quot;insertSemicolons&quot;: false, // 不使用冒号</span></span>
<span class="line"><span>    &quot;insertBraces&quot;: false, // 不使用分号</span></span>
<span class="line"><span>    &quot;insertNewLineAroundImports&quot;: true, // import之后插入空行</span></span>
<span class="line"><span>    &quot;insertNewLineAroundBlocks&quot;: false // 每个块不添加空行</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>总结一下，配置格式化有两种方式，一种是使用 .prettierrc 文件的形式配置，另一种是在编辑器的 settings 中自行配置，通过 mpx.format.defaultFormatterOptions 选项。</p>`,62),c=[n];function l(r,d,h,u,m,g){return s(),e("div",null,c)}const q=t(p,[["render",l]]);export{f as __pageData,q as default};
