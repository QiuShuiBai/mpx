import{_ as s,c as a,o as i,a7 as n}from"./chunks/framework.CwvFaCp2.js";const E=JSON.parse('{"title":"小程序插件","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advance/plugin.md","filePath":"guide/advance/plugin.md"}'),p={name:"guide/advance/plugin.md"},l=n(`<h1 id="小程序插件" tabindex="-1">小程序插件 <a class="header-anchor" href="#小程序插件" aria-label="Permalink to &quot;小程序插件&quot;">​</a></h1><p>插件，是可被添加到小程序内直接使用的功能组件，是对一组 js 接口、自定义组件或页面的封装，。开发者可以像开发小程序一样开发一个插件，供其他小程序使用。同时，小程序开发者可直接在小程序内使用插件，无需重复开发，但是在使用第三那个插件时，无法看到插件的代码。插件适合用来封装自己的功能或服务，提供给第三方小程序进行展示和使用。</p><p>开发小程序插件，大致要经过 开通插件功能，填写开发信息，提交审,发布，管理插件使用申请。同时在原生小程序使用插件，要先发出插件申请，等待使用申请通过，插件所有者还可以进行拒绝。 原生小程序开发插件请移步：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/development.html" target="_blank" rel="noreferrer">微信小程序插件开发</a></li><li><a href="https://opendocs.alipay.com/mini/plugin/create-plugin" target="_blank" rel="noreferrer">支付宝小程序插件开发</a></li></ul><p>新建插件类型的项目后，如果创建示例项目，则项目中将包含三个目录：</p><ul><li>plugin 目录：插件代码目录。</li><li>miniprogram 目录：放置一个小程序，用于调试插件。</li><li>doc 目录：用于放置插件开发文档。</li></ul><p>，插件会同时有多个线上版本，由使用插件的小程序决定具体使用的版本号。</p><h3 id="如何编写一个插件" tabindex="-1">如何编写一个插件 <a class="header-anchor" href="#如何编写一个插件" aria-label="Permalink to &quot;如何编写一个插件&quot;">​</a></h3><p>推荐使用 mpx 官方脚手架 @mpxjs/cli 创建一个小程序插件项目来快速的进入插件开发阶段，首先全局安装 @mpxjs/cli</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @mpxjs/cli</span></span></code></pre></div><p>然后使用 cli 初始化项目</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请选择小程序项目所属平台（目前仅微信下支持跨平台输出） wx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是否需要跨小程序平台 No</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是否需要使用小程序云开发能力 No</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是否是个插件项目</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（不清楚请选 No ！什么是插件项目请看微信官方文档！） Yes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是否需要typescript No</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 项目描述 A mpx project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请输入小程序的Appid touristappid</span></span></code></pre></div><p><strong>文件目录</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  src</span></span>
<span class="line"><span>  |-- miniprogram // 目录：放置一个小程序，用于调试插件。</span></span>
<span class="line"><span>  |   --pages</span></span>
<span class="line"><span>  |   --app.mpx // 引入插件调试</span></span>
<span class="line"><span>  |-- plugin // 目录：插件代码目录</span></span>
<span class="line"><span>  |   --components // 插件组件</span></span>
<span class="line"><span>  |     -- list.mpx // 插件提供的列表组件</span></span>
<span class="line"><span>  |   --plugin.json // 插件配置文件</span></span></code></pre></div><p>我们在 plugin/components/list.mpx 中开发插件中的列表组件，开发完成后，在plugin.json中我们向使用者小程序开放的所有自定义组件、页面和 js 接口，格式如下：</p><p><strong>代码示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &quot;publicComponents&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;list&quot;: &quot;./components/list&quot; // 使用mpx 中的webpack 路径引入规范</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &quot;pages&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;hello-page&quot;: &quot;./pages/hello-page&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行 <strong>npm run build/serve</strong> 构建小程序产物，在 dist 文件夹下，生成最终的小程序插件产物，使用微信开发者工具，打开代码片段菜单栏，选择插件模式，打开 dist 文件夹。</p><p>我们可以像小程序一样预览和上传，但插件没有体验版，同时我们通常将 miniprogram 下的代码当做使用插件的小程序代码，来进行插件的调试和测试。</p><p>在开发完插件之后，我们可以上传插件代码，在小程序管理后台进行提交发布审核，审核通过后，就可以提供给第三方小程序使用我们的插件了。</p><p>使用 mpx 开发插件的优势相似于使用 mpx 开发小程序项目，可以使用 mpx 的各种增强特性以及跨平台输出的特性，提高开发效率和插件性能。</p>`,21),t=[l];function e(h,k,r,o,d,c){return i(),a("div",null,t)}const u=s(p,[["render",e]]);export{E as __pageData,u as default};
